{
  "version": 3,
  "sources": ["node_modules/.deno/uri-templates@0.2.0/node_modules/uri-templates/uri-templates.js", "lib/factories/rootFactory.ts", "lib/renderers/SelectionRenderer.ts", "lib/factories/selectionFactory.ts", "lib/utils/getComponent.ts", "lib/utils/unravelArgs.ts", "lib/utils/isJSONObject.ts", "lib/utils/isTypedObject.ts", "lib/utils/getValueType.ts", "lib/factories/actionFactory.ts", "node_modules/.deno/json-ptr@3.1.1/node_modules/json-ptr/src/util.ts", "node_modules/.deno/json-ptr@3.1.1/node_modules/json-ptr/src/pointer.ts", "lib/renderers/ActionStateRenderer.ts", "lib/utils/getSubmitDetails.ts", "lib/utils/mithrilRedraw.ts", "lib/consts.ts", "lib/factories/actionSelectionFactory.ts", "lib/factories/octironFactory.ts", "lib/utils/escapeJSONPointerParts.ts", "lib/utils/getIterableValue.ts", "lib/utils/isIRIObject.ts", "lib/utils/isIterable.ts", "lib/utils/isMetadataObject.ts", "lib/utils/isValueObject.ts", "lib/utils/parseSelectorString.ts", "lib/utils/resolvePropertyValueSpecification.ts", "lib/utils/getSelection.ts", "lib/renderers/ActionSelectionRenderer.ts", "lib/renderers/PerformRenderer.ts", "lib/alternatives/htmlFragments.ts", "lib/alternatives/html.ts", "lib/failures.ts", "lib/utils/flattenIRIObjects.ts", "lib/store.ts", "lib/utils/makeTypeDefs.ts", "lib/utils/classes.ts", "lib/utils/makeTypeDef.ts", "lib/handlers/jsonLDHandler.ts", "lib/components/OctironJSON.ts", "lib/components/OctironDebug.ts", "lib/components/OctironExplorer.ts", "lib/components/OctironForm.ts", "lib/components/OctironSubmitButton.ts", "lib/octiron.ts"],
  "sourcesContent": ["(function (global, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine('uri-templates', [], factory);\n\t} else if (typeof module !== 'undefined' && module.exports){\n\t\tmodule.exports = factory();\n\t} else {\n\t\tglobal.UriTemplate = factory();\n\t}\n})(this, function () {\n\tvar uriTemplateGlobalModifiers = {\n\t\t\"+\": true,\n\t\t\"#\": true,\n\t\t\".\": true,\n\t\t\"/\": true,\n\t\t\";\": true,\n\t\t\"?\": true,\n\t\t\"&\": true\n\t};\n\tvar uriTemplateSuffices = {\n\t\t\"*\": true\n\t};\n\tvar urlEscapedChars = /[:/&?#]/;\n\n\tfunction notReallyPercentEncode(string) {\n\t\treturn encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {\n\t\t\treturn \"%\" + doubleEncoded.substring(3);\n\t\t});\n\t}\n\n\tfunction isPercentEncoded(string) {\n\t\tstring = string.replace(/%../g, '');\n\t\treturn encodeURIComponent(string) === string;\n\t}\n\n\tfunction uriTemplateSubstitution(spec) {\n\t\tvar modifier = \"\";\n\t\tif (uriTemplateGlobalModifiers[spec.charAt(0)]) {\n\t\t\tmodifier = spec.charAt(0);\n\t\t\tspec = spec.substring(1);\n\t\t}\n\t\tvar separator = \"\";\n\t\tvar prefix = \"\";\n\t\tvar shouldEscape = true;\n\t\tvar showVariables = false;\n\t\tvar trimEmptyString = false;\n\t\tif (modifier == '+') {\n\t\t\tshouldEscape = false;\n\t\t} else if (modifier == \".\") {\n\t\t\tprefix = \".\";\n\t\t\tseparator = \".\";\n\t\t} else if (modifier == \"/\") {\n\t\t\tprefix = \"/\";\n\t\t\tseparator = \"/\";\n\t\t} else if (modifier == '#') {\n\t\t\tprefix = \"#\";\n\t\t\tshouldEscape = false;\n\t\t} else if (modifier == ';') {\n\t\t\tprefix = \";\";\n\t\t\tseparator = \";\",\n\t\t\tshowVariables = true;\n\t\t\ttrimEmptyString = true;\n\t\t} else if (modifier == '?') {\n\t\t\tprefix = \"?\";\n\t\t\tseparator = \"&\",\n\t\t\tshowVariables = true;\n\t\t} else if (modifier == '&') {\n\t\t\tprefix = \"&\";\n\t\t\tseparator = \"&\",\n\t\t\tshowVariables = true;\n\t\t}\n\n\t\tvar varNames = [];\n\t\tvar varList = spec.split(\",\");\n\t\tvar varSpecs = [];\n\t\tvar varSpecMap = {};\n\t\tfor (var i = 0; i < varList.length; i++) {\n\t\t\tvar varName = varList[i];\n\t\t\tvar truncate = null;\n\t\t\tif (varName.indexOf(\":\") != -1) {\n\t\t\t\tvar parts = varName.split(\":\");\n\t\t\t\tvarName = parts[0];\n\t\t\t\ttruncate = parseInt(parts[1]);\n\t\t\t}\n\t\t\tvar suffices = {};\n\t\t\twhile (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {\n\t\t\t\tsuffices[varName.charAt(varName.length - 1)] = true;\n\t\t\t\tvarName = varName.substring(0, varName.length - 1);\n\t\t\t}\n\t\t\tvar varSpec = {\n\t\t\t\ttruncate: truncate,\n\t\t\t\tname: varName,\n\t\t\t\tsuffices: suffices\n\t\t\t};\n\t\t\tvarSpecs.push(varSpec);\n\t\t\tvarSpecMap[varName] = varSpec;\n\t\t\tvarNames.push(varName);\n\t\t}\n\t\tvar subFunction = function (valueFunction) {\n\t\t\tvar result = \"\";\n\t\t\tvar startIndex = 0;\n\t\t\tfor (var i = 0; i < varSpecs.length; i++) {\n\t\t\t\tvar varSpec = varSpecs[i];\n\t\t\t\tvar value = valueFunction(varSpec.name);\n\t\t\t\tif (value == null || (Array.isArray(value) && value.length == 0) || (typeof value == 'object' && Object.keys(value).length == 0)) {\n\t\t\t\t\tstartIndex++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (i == startIndex) {\n\t\t\t\t\tresult += prefix;\n\t\t\t\t} else {\n\t\t\t\t\tresult += (separator || \",\");\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tif (showVariables) {\n\t\t\t\t\t\tresult += varSpec.name + \"=\";\n\t\t\t\t\t}\n\t\t\t\t\tfor (var j = 0; j < value.length; j++) {\n\t\t\t\t\t\tif (j > 0) {\n\t\t\t\t\t\t\tresult += varSpec.suffices['*'] ? (separator || \",\") : \",\";\n\t\t\t\t\t\t\tif (varSpec.suffices['*'] && showVariables) {\n\t\t\t\t\t\t\t\tresult += varSpec.name + \"=\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, \"%21\") : notReallyPercentEncode(value[j]);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof value == \"object\") {\n\t\t\t\t\tif (showVariables && !varSpec.suffices['*']) {\n\t\t\t\t\t\tresult += varSpec.name + \"=\";\n\t\t\t\t\t}\n\t\t\t\t\tvar first = true;\n\t\t\t\t\tfor (var key in value) {\n\t\t\t\t\t\tif (!first) {\n\t\t\t\t\t\t\tresult += varSpec.suffices['*'] ? (separator || \",\") : \",\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfirst = false;\n\t\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(key).replace(/!/g, \"%21\") : notReallyPercentEncode(key);\n\t\t\t\t\t\tresult += varSpec.suffices['*'] ? '=' : \",\";\n\t\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, \"%21\") : notReallyPercentEncode(value[key]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (showVariables) {\n\t\t\t\t\t\tresult += varSpec.name;\n\t\t\t\t\t\tif (!trimEmptyString || value != \"\") {\n\t\t\t\t\t\t\tresult += \"=\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (varSpec.truncate != null) {\n\t\t\t\t\t\tvalue = value.substring(0, varSpec.truncate);\n\t\t\t\t\t}\n\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value).replace(/!/g, \"%21\"): notReallyPercentEncode(value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tvar guessFunction = function (stringValue, resultObj, strict) {\n\t\t\tif (prefix) {\n\t\t\t\tstringValue = stringValue.substring(prefix.length);\n\t\t\t}\n\t\t\tif (varSpecs.length == 1 && varSpecs[0].suffices['*']) {\n\t\t\t\tvar varSpec = varSpecs[0];\n\t\t\t\tvar varName = varSpec.name;\n\t\t\t\tvar arrayValue = varSpec.suffices['*'] ? stringValue.split(separator || \",\") : [stringValue];\n\t\t\t\tvar hasEquals = (shouldEscape && stringValue.indexOf('=') != -1);\t// There's otherwise no way to distinguish between \"{value*}\" for arrays and objects\n\t\t\t\tfor (var i = 1; i < arrayValue.length; i++) {\n\t\t\t\t\tvar stringValue = arrayValue[i];\n\t\t\t\t\tif (hasEquals && stringValue.indexOf('=') == -1) {\n\t\t\t\t\t\t// Bit of a hack - if we're expecting \"=\" for key/value pairs, and values can't contain \"=\", then assume a value has been accidentally split\n\t\t\t\t\t\tarrayValue[i - 1] += (separator || \",\") + stringValue;\n\t\t\t\t\t\tarrayValue.splice(i, 1);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < arrayValue.length; i++) {\n\t\t\t\t\tvar stringValue = arrayValue[i];\n\t\t\t\t\tif (shouldEscape && stringValue.indexOf('=') != -1) {\n\t\t\t\t\t\thasEquals = true;\n\t\t\t\t\t}\n\t\t\t\t\tvar innerArrayValue = stringValue.split(\",\");\n\t\t\t\t\tif (innerArrayValue.length == 1) {\n\t\t\t\t\t\tarrayValue[i] = innerArrayValue[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tarrayValue[i] = innerArrayValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (showVariables || hasEquals) {\n\t\t\t\t\tvar objectValue = resultObj[varName] || {};\n\t\t\t\t\tfor (var j = 0; j < arrayValue.length; j++) {\n\t\t\t\t\t\tvar innerValue = stringValue;\n\t\t\t\t\t\tif (showVariables && !innerValue) {\n\t\t\t\t\t\t\t// The empty string isn't a valid variable, so if our value is zero-length we have nothing\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof arrayValue[j] == \"string\") {\n\t\t\t\t\t\t\tvar stringValue = arrayValue[j];\n\t\t\t\t\t\t\tvar innerVarName = stringValue.split(\"=\", 1)[0];\n\t\t\t\t\t\t\tvar stringValue = stringValue.substring(innerVarName.length + 1);\n\t\t\t\t\t\t\tif (shouldEscape) {\n\t\t\t\t\t\t\t\tif (strict && !isPercentEncoded(stringValue)) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tstringValue = decodeURIComponent(stringValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinnerValue = stringValue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar stringValue = arrayValue[j][0];\n\t\t\t\t\t\t\tvar innerVarName = stringValue.split(\"=\", 1)[0];\n\t\t\t\t\t\t\tvar stringValue = stringValue.substring(innerVarName.length + 1);\n\t\t\t\t\t\t\tif (shouldEscape) {\n\t\t\t\t\t\t\t\tif (strict && !isPercentEncoded(stringValue)) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tstringValue = decodeURIComponent(stringValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tarrayValue[j][0] = stringValue;\n\t\t\t\t\t\t\tinnerValue = arrayValue[j];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (shouldEscape) {\n\t\t\t\t\t\t\tif (strict && !isPercentEncoded(innerVarName)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinnerVarName = decodeURIComponent(innerVarName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (objectValue[innerVarName] !== undefined) {\n\t\t\t\t\t\t\tif (Array.isArray(objectValue[innerVarName])) {\n\t\t\t\t\t\t\t\tobjectValue[innerVarName].push(innerValue);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tobjectValue[innerVarName] = [objectValue[innerVarName], innerValue];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobjectValue[innerVarName] = innerValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Object.keys(objectValue).length == 1 && objectValue[varName] !== undefined) {\n\t\t\t\t\t\tresultObj[varName] = objectValue[varName];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresultObj[varName] = objectValue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (shouldEscape) {\n\t\t\t\t\t\tfor (var j = 0; j < arrayValue.length; j++) {\n\t\t\t\t\t\t\tvar innerArrayValue = arrayValue[j];\n\t\t\t\t\t\t\tif (Array.isArray(innerArrayValue)) {\n\t\t\t\t\t\t\t\tfor (var k = 0; k < innerArrayValue.length; k++) {\n\t\t\t\t\t\t\t\t\tif (strict && !isPercentEncoded(innerArrayValue[k])) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tinnerArrayValue[k] = decodeURIComponent(innerArrayValue[k]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (strict && !isPercentEncoded(innerArrayValue)) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tarrayValue[j] = decodeURIComponent(innerArrayValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resultObj[varName] !== undefined) {\n\t\t\t\t\t\tif (Array.isArray(resultObj[varName])) {\n\t\t\t\t\t\t\tresultObj[varName] = resultObj[varName].concat(arrayValue);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultObj[varName] = [resultObj[varName]].concat(arrayValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (arrayValue.length == 1 && !varSpec.suffices['*']) {\n\t\t\t\t\t\t\tresultObj[varName] = arrayValue[0];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultObj[varName] = arrayValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar arrayValue = (varSpecs.length == 1) ? [stringValue] : stringValue.split(separator || \",\");\n\t\t\t\tvar specIndexMap = {};\n\t\t\t\tfor (var i = 0; i < arrayValue.length; i++) {\n\t\t\t\t\t// Try from beginning\n\t\t\t\t\tvar firstStarred = 0;\n\t\t\t\t\tfor (; firstStarred < varSpecs.length - 1 && firstStarred < i; firstStarred++) {\n\t\t\t\t\t\tif (varSpecs[firstStarred].suffices['*']) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (firstStarred == i) {\n\t\t\t\t\t\t// The first [i] of them have no \"*\" suffix\n\t\t\t\t\t\tspecIndexMap[i] = i;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Try from the end\n\t\t\t\t\t\tfor (var lastStarred = varSpecs.length - 1; lastStarred > 0 && (varSpecs.length - lastStarred) < (arrayValue.length - i); lastStarred--) {\n\t\t\t\t\t\t\tif (varSpecs[lastStarred].suffices['*']) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((varSpecs.length - lastStarred) == (arrayValue.length - i)) {\n\t\t\t\t\t\t\t// The last [length - i] of them have no \"*\" suffix\n\t\t\t\t\t\t\tspecIndexMap[i] = lastStarred;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Just give up and use the first one\n\t\t\t\t\tspecIndexMap[i] = firstStarred;\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < arrayValue.length; i++) {\n\t\t\t\t\tvar stringValue = arrayValue[i];\n\t\t\t\t\tif (!stringValue && showVariables) {\n\t\t\t\t\t\t// The empty string isn't a valid variable, so if our value is zero-length we have nothing\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tvar innerArrayValue = stringValue.split(\",\");\n\t\t\t\t\tvar hasEquals = false;\n\n\t\t\t\t\tif (showVariables) {\n\t\t\t\t\t\tvar stringValue = innerArrayValue[0]; // using innerArrayValue\n\t\t\t\t\t\tvar varName = stringValue.split(\"=\", 1)[0];\n\t\t\t\t\t\tvar stringValue = stringValue.substring(varName.length + 1);\n\t\t\t\t\t\tinnerArrayValue[0] = stringValue;\n\t\t\t\t\t\tvar varSpec = varSpecMap[varName] || varSpecs[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar varSpec = varSpecs[specIndexMap[i]];\n\t\t\t\t\t\tvar varName = varSpec.name;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j = 0; j < innerArrayValue.length; j++) {\n\t\t\t\t\t\tif (shouldEscape) {\n\t\t\t\t\t\t\tif (strict && !isPercentEncoded(innerArrayValue[j])) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinnerArrayValue[j] = decodeURIComponent(innerArrayValue[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((showVariables || varSpec.suffices['*'])&& resultObj[varName] !== undefined) {\n\t\t\t\t\t\tif (Array.isArray(resultObj[varName])) {\n\t\t\t\t\t\t\tresultObj[varName] = resultObj[varName].concat(innerArrayValue);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultObj[varName] = [resultObj[varName]].concat(innerArrayValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (innerArrayValue.length == 1 && !varSpec.suffices['*']) {\n\t\t\t\t\t\t\tresultObj[varName] = innerArrayValue[0];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultObj[varName] = innerArrayValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 1;\n\t\t};\n\t\treturn {\n\t\t\tvarNames: varNames,\n\t\t\tprefix: prefix,\n\t\t\tsubstitution: subFunction,\n\t\t\tunSubstitution: guessFunction\n\t\t};\n\t}\n\n\tfunction UriTemplate(template) {\n\t\tif (!(this instanceof UriTemplate)) {\n\t\t\treturn new UriTemplate(template);\n\t\t}\n\t\tvar parts = template.split(\"{\");\n\t\tvar textParts = [parts.shift()];\n\t\tvar prefixes = [];\n\t\tvar substitutions = [];\n\t\tvar unSubstitutions = [];\n\t\tvar varNames = [];\n\t\twhile (parts.length > 0) {\n\t\t\tvar part = parts.shift();\n\t\t\tvar spec = part.split(\"}\")[0];\n\t\t\tvar remainder = part.substring(spec.length + 1);\n\t\t\tvar funcs = uriTemplateSubstitution(spec);\n\t\t\tsubstitutions.push(funcs.substitution);\n\t\t\tunSubstitutions.push(funcs.unSubstitution);\n\t\t\tprefixes.push(funcs.prefix);\n\t\t\ttextParts.push(remainder);\n\t\t\tvarNames = varNames.concat(funcs.varNames);\n\t\t}\n\t\tthis.fill = function (valueFunction) {\n\t\t\tif (valueFunction && typeof valueFunction !== 'function') {\n\t\t\t\tvar value = valueFunction;\n\t\t\t\tvalueFunction = function (varName) {\n\t\t\t\t\treturn value[varName];\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar result = textParts[0];\n\t\t\tfor (var i = 0; i < substitutions.length; i++) {\n\t\t\t\tvar substitution = substitutions[i];\n\t\t\t\tresult += substitution(valueFunction);\n\t\t\t\tresult += textParts[i + 1];\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tthis.fromUri = function (substituted, options) {\n\t\t\toptions = options || {};\n\t\t\tvar result = {};\n\t\t\tfor (var i = 0; i < textParts.length; i++) {\n\t\t\t\tvar part = textParts[i];\n\t\t\t\tif (substituted.substring(0, part.length) !== part) {\n\t\t\t\t\treturn /*undefined*/;\n\t\t\t\t}\n\t\t\t\tsubstituted = substituted.substring(part.length);\n\t\t\t\tif (i >= textParts.length - 1) {\n\t\t\t\t\t// We've run out of input - is there any template left?\n\t\t\t\t\tif (substituted == \"\") {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn /*undefined*/;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar prefix = prefixes[i];\n\t\t\t\tif (prefix && substituted.substring(0, prefix.length) !== prefix) {\n\t\t\t\t\t// All values are optional - if we have a prefix and it doesn't match, move along\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Find the next part to un-substitute\n\t\t\t\tvar nextPart = textParts[i + 1];\n\t\t\t\tvar offset = i;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (offset == textParts.length - 2) {\n\t\t\t\t\t\tvar endPart = substituted.substring(substituted.length - nextPart.length);\n\t\t\t\t\t\tif (endPart !== nextPart) {\n\t\t\t\t\t\t\treturn /*undefined*/;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar stringValue = substituted.substring(0, substituted.length - nextPart.length);\n\t\t\t\t\t\tsubstituted = endPart;\n\t\t\t\t\t} else if (nextPart) {\n\t\t\t\t\t\tvar nextPartPos = substituted.indexOf(nextPart);\n\t\t\t\t\t\tvar stringValue = substituted.substring(0, nextPartPos);\n\t\t\t\t\t\tsubstituted = substituted.substring(nextPartPos);\n\t\t\t\t\t} else if (prefixes[offset + 1]) {\n\t\t\t\t\t\tvar nextPartPos = substituted.indexOf(prefixes[offset + 1]);\n\t\t\t\t\t\tif (nextPartPos === -1) nextPartPos = substituted.length;\n\t\t\t\t\t\tvar stringValue = substituted.substring(0, nextPartPos);\n\t\t\t\t\t\tsubstituted = substituted.substring(nextPartPos);\n\t\t\t\t\t} else if (textParts.length > offset + 2) {\n\t\t\t\t\t\t// If the separator between this variable and the next is blank (with no prefix), continue onwards\n\t\t\t\t\t\toffset++;\n\t\t\t\t\t\tnextPart = textParts[offset + 1];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar stringValue = substituted;\n\t\t\t\t\t\tsubstituted = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!unSubstitutions[i](stringValue, result, options.strict)) {\n\t\t\t\t\treturn /*undefined*/;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\tthis.varNames = varNames;\n\t\tthis.template = template;\n\t}\n\tUriTemplate.prototype = {\n\t\ttoString: function () {\n\t\t\treturn this.template;\n\t\t},\n\t\tfillFromObject: function (obj) {\n\t\t\treturn this.fill(obj);\n\t\t},\n\t\ttest: function (uri, options) {\n\t\t\treturn !!this.fromUri(uri, options)\n\t\t}\n\t};\n\n\treturn UriTemplate;\n});\n", "import m from \"mithril\";\nimport type { OctironRoot, OctironSelection, Predicate, SelectView, OctironSelectArgs, Selector, TypeDefs, OctironPerformArgs, PerformView, OctironDefaultArgs } from '../types/octiron.ts';\nimport { SelectionRenderer } from \"../renderers/SelectionRenderer.ts\";\nimport { unravelArgs } from \"../utils/unravelArgs.ts\";\nimport type { Store } from \"../store.ts\";\n\nexport type RootFactoryInternals = {\n  store: Store;\n  typeDefs: TypeDefs;\n};\n\n/**\n * @description\n * An internal factory function for creating `OctironRoot` objects.\n *\n * @param internals Internally held values from upstream.\n */\nexport function rootFactory(\n  internals: RootFactoryInternals,\n): OctironRoot {\n  const self: OctironRoot = Object.assign(\n    (predicate: Predicate, children: m.Children) => {\n      return self.root((o: OctironSelection) => o(predicate, children));\n    },\n    {\n      octironType: \"root\",\n      isOctiron: true,\n      readonly: true,\n      value: null,\n      store: internals.store,\n\n      not(\n        predicate: Predicate,\n        children: m.Children,\n      ) {\n        return self.root((o: OctironSelection) => o.not(predicate, children));\n      },\n\n      root(\n        arg1?: Selector | OctironSelectArgs | SelectView,\n        arg2?: OctironSelectArgs | SelectView,\n        arg3?: SelectView,\n      ) {\n        let selector: string;\n        const [childSelector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n        if (childSelector == null) {\n          selector = internals.store.rootIRI;\n        } else {\n          selector = `${internals.store.rootIRI} ${childSelector}`;\n        }\n\n        return m(SelectionRenderer, {\n          selector,\n          args,\n          view,\n          internals: {\n            store: internals.store,\n            typeDefs: args?.typeDefs || internals.typeDefs,\n          },\n        });\n      },\n\n      select(\n        arg1: Selector,\n        arg2?: OctironSelectArgs | SelectView,\n        arg3?: SelectView,\n      ) {\n        return self.root(arg1, arg2 as OctironSelectArgs, arg3 as SelectView);\n      },\n\n      present(\n        arg1?: OctironSelectArgs | SelectView,\n        arg2?: SelectView,\n      ) {\n        return self.root(arg1 as OctironSelectArgs, arg2 as SelectView);\n      },\n\n      default(\n        arg1?: OctironDefaultArgs\n      ) {\n        return self.root(o => o.default(arg1 as OctironSelectArgs));\n      },\n\n      perform(\n        arg1?: Selector | OctironPerformArgs | PerformView,\n        arg2?: OctironPerformArgs | PerformView,\n        arg3?: PerformView,\n      ) {\n        if (typeof arg1 === 'string') {\n          return self.root(arg1, (o) => o.perform(\n            arg2 as OctironPerformArgs,\n            arg3 as PerformView,\n          ));\n        }\n\n        return self.root((o) => o.perform(\n          arg2 as OctironPerformArgs,\n          arg3 as PerformView,\n        ));\n      },\n\n    } as const,\n  ) satisfies OctironRoot;\n\n  return self;\n}\n", "import type { JSONValue } from \"../types/common.ts\";\nimport type {\n  Octiron,\n  OctironSelectArgs,\n  OctironSelection,\n  Selector,\n  SelectView,\n  TypeDefs,\n} from \"../types/octiron.ts\";\nimport type {\n  Failure,\n  ReadonlySelectionResult,\n  SelectionDetails,\n} from \"../types/store.ts\";\nimport m from \"mithril\";\nimport { selectionFactory } from \"../factories/selectionFactory.ts\";\nimport { isJSONObject } from \"../utils/isJSONObject.ts\";\nimport { mithrilRedraw } from \"../utils/mithrilRedraw.ts\";\nimport type { Store } from \"../store.ts\";\n\nexport type SelectionRendererInternals = {\n  store: Store;\n  typeDefs: TypeDefs;\n  parent?: Octiron;\n  value?: JSONValue;\n};\n\nexport type SelectionRendererAttrs = {\n  selector: Selector;\n  args: OctironSelectArgs;\n  view: SelectView;\n  internals: SelectionRendererInternals;\n};\n\nconst preKey = Symbol.for('@pre');\nconst postKey = Symbol.for('@post');\n\nfunction shouldReselect(\n  next: SelectionRendererAttrs,\n  prev: SelectionRendererAttrs,\n) {\n  return next.internals.store !== prev.internals.store ||\n    next.selector !== prev.selector ||\n    next.internals.value !== prev.internals.value;\n}\n\n/**\n * @description\n * Subscribes to a selection's result using the Octiron store. Each selection\n * result is feed to an Octiron instance and is only removed if a later\n * selection update does not include the same result. Selection results are\n * given a unique key in the form of a json-path.\n *\n * Once an Octiron instance is created using a selection, further changes via\n * the upstream internals object or user given args applied to the downstream\n * Octiron instances using their internal update hooks.\n */\nexport const SelectionRenderer: m.FactoryComponent<SelectionRendererAttrs> = (\n  vnode,\n) => {\n  const key = Symbol(`SelectionRenderer`);\n  let currentAttrs = vnode.attrs;\n  let details: undefined | SelectionDetails<ReadonlySelectionResult>;\n\n  const instances: Record<symbol, {\n    octiron: OctironSelection;\n    selectionResult: ReadonlySelectionResult;\n  }> = {};\n\n  function createInstances() {\n    let hasChanges = false;\n\n    const {\n      store,\n      typeDefs,\n      parent,\n    } = currentAttrs.internals;\n\n    const nextKeys: Array<symbol> = [];\n\n    if (details == null) {\n      const prevKeys = Reflect.ownKeys(instances) as symbol[];\n\n      for (const key of prevKeys) {\n        if (!nextKeys.includes(key)) {\n          hasChanges = true;\n\n          delete instances[key];\n        }\n      }\n\n      if (hasChanges) {\n        mithrilRedraw();\n      }\n\n      return;\n    }\n\n    for (const selectionResult of details.result) {\n      const key = Symbol.for(selectionResult.pointer);\n      \n      nextKeys.push(key);\n\n      if (Object.hasOwn(instances, key)) {\n        const next = selectionResult;\n        const prev = instances[key].selectionResult;\n\n        if (\n          prev.type === 'value' &&\n          next.type === 'value' &&\n          next.value === prev.value\n        ) {\n          continue;\n        } else if (\n          prev.type === 'entity' &&\n          next.type === 'entity' &&\n          (\n            next.ok !== prev.ok ||\n            next.status !== prev.status ||\n            next.value !== prev.value\n          )\n        ) {\n          continue;\n        }\n      }\n\n      hasChanges = true;\n\n      let octiron: Octiron;\n\n      if (selectionResult.type === 'entity') {\n        octiron = selectionFactory({\n          store,\n          typeDefs,\n          value: selectionResult.value,\n          parent,\n        });\n      } else {\n        octiron = selectionFactory({\n          store,\n          typeDefs,\n          value: selectionResult.value,\n          datatype: selectionResult.datatype,\n          parent,\n        });\n      }\n\n      instances[key] = {\n        octiron,\n        selectionResult,\n      };\n    }\n\n    const prevKeys = Reflect.ownKeys(instances) as symbol[];\n\n    for (const key of prevKeys) {\n      if (!nextKeys.includes(key)) {\n        hasChanges = true;\n\n        delete instances[key];\n      }\n    }\n\n    if (hasChanges) {\n      mithrilRedraw();\n    }\n  }\n\n  async function fetchRequired(required: string[]) {\n    if (required.length === 0) {\n      return;\n    }\n\n    // deno-lint-ignore no-explicit-any\n    const promises: Promise<any>[] = [];\n\n    for (const iri of required) {\n      promises.push(currentAttrs.internals.store.fetch(iri));\n    }\n\n    await Promise.allSettled(promises);\n  }\n\n  function listener(next: SelectionDetails<ReadonlySelectionResult>) {\n    let required: string[] = [];\n\n    if (typeof details === 'undefined') {\n      required = next.required;\n    } else {\n      for (const iri of next.required) {\n        if (!details.required.includes(iri)) {\n          required.push(iri);\n        }\n      }\n    }\n\n    details = next;\n\n    if (required.length > 0) {\n      fetchRequired(required);\n    }\n\n    createInstances();\n  }\n\n  function subscribe() {\n    if (\n      typeof currentAttrs.internals.value !== 'undefined' &&\n      !isJSONObject(currentAttrs.internals.value)\n    ) {\n      currentAttrs.internals.store.unsubscribe(key);\n      createInstances();\n\n      return;\n    }\n\n    details = currentAttrs.internals.store.subscribe({\n      key,\n      selector: currentAttrs.selector,\n      value: currentAttrs.internals.value,\n      listener,\n    });\n\n    fetchRequired(details.required);\n\n    createInstances();\n  }\n\n  return {\n    oninit: ({ attrs }) => {\n      currentAttrs = attrs;\n\n      subscribe();\n    },\n    onbeforeupdate: ({ attrs }) => {\n      const reselect = shouldReselect(attrs, currentAttrs);\n\n      currentAttrs = attrs;\n\n      if (reselect) {\n        attrs.internals.store.unsubscribe(key);\n        subscribe();\n      }\n    },\n    onbeforeremove: ({ attrs }) => {\n      currentAttrs = attrs;\n\n      attrs.internals.store.unsubscribe(key);\n    },\n    view: ({ attrs }): m.Children => {\n      if (details == null || !details.complete) {\n        return attrs.args.loading;\n      } else if ((details.hasErrors || details.hasMissing) && typeof attrs.args.fallback !== 'function') {\n        return attrs.args.fallback;\n      }\n\n      const view = currentAttrs.view;\n      const {\n        pre,\n        sep,\n        post,\n        start,\n        end,\n        predicate,\n        fallback,\n      } = currentAttrs.args;\n\n      if (typeof view === 'undefined') {\n        return;\n      }\n\n      const children: m.Children = [];\n      let list = Reflect.ownKeys(instances).map(((key) => instances[key as symbol]));\n\n      if (start != null || end != null) {\n        list = list.slice(\n          start ?? 0,\n          end,\n        );\n      }\n\n      if (predicate != null) {\n        list = list.filter(({ octiron }) => predicate(octiron));\n      }\n\n      if (pre != null) {\n        children.push(m.fragment({ key: preKey }, [pre]));\n      }\n      \n      for (let index = 0; index < list.length; index++) {\n        const { selectionResult, octiron } = list[index];\n        const { key } = selectionResult;\n\n        if (index !== 0) {\n          children.push(m.fragment({ key: `@${Symbol.keyFor(key)}` }, [sep]));\n        }\n\n        if (selectionResult.type === 'value') {\n          children.push(m.fragment({ key }, [view(octiron)]));\n        } else if (!selectionResult.ok && typeof fallback === 'function') {\n          children.push(\n            m.fragment({ key }, [fallback(octiron, selectionResult.reason as Failure)]),\n          );\n        } else if (!selectionResult.ok) {\n          children.push(m.fragment({ key }, [fallback as m.Children]));\n        } else {\n          children.push(m.fragment({ key }, [view(octiron)]));\n        }\n      }\n\n      if (post != null) {\n        children.push(m.fragment({ key: postKey }, [post]));\n      }\n\n      return children;\n    },\n  };\n};\n", "import type { JSONValue } from '../types/common.ts';\nimport type { BaseAttrs, Octiron, OctironDefaultArgs, OctironPerformArgs, OctironPresentArgs, OctironSelectArgs, OctironSelection, PerformView, Predicate, PresentComponent, Selector, SelectView, TypeDefs } from '../types/octiron.ts';\nimport m from \"mithril\";\nimport { SelectionRenderer } from \"../renderers/SelectionRenderer.ts\";\nimport { getComponent } from '../utils/getComponent.ts';\nimport { unravelArgs } from \"../utils/unravelArgs.ts\";\nimport { getValueType } from \"../utils/getValueType.ts\";\nimport { isJSONObject } from \"../utils/isJSONObject.ts\";\nimport type { Store } from \"../store.ts\";\nimport { PerformRenderer } from \"../renderers/PerformRenderer.ts\";\n\nexport type SelectionFactoryInternals = {\n  store: Store;\n  typeDefs: TypeDefs;\n  parent?: Octiron;\n  value?: JSONValue;\n  datatype?: string;\n};\n\n/* Internal hooks for upstream to provide updates */\nexport interface OctironHooks {\n  _updateArgs(args: OctironSelectArgs): void;\n  _updateValue(value: JSONValue): void;\n};\n\n/**\n * @description\n * An internal factory function for creating `OctironSelection` objects.\n *\n * @param internals Internally held values from upstream.\n * @param args User given arguments.\n */\nexport function selectionFactory<Attrs extends BaseAttrs = {}>(\n  internals: SelectionFactoryInternals,\n  args?: OctironSelectArgs<Attrs>,\n): OctironSelection & OctironHooks {\n  const factoryArgs = Object.assign({}, args);\n  const type = getValueType(internals.value);\n\n  const refs = {\n    isOctiron: true,\n    octironType: 'selection',\n    value: internals.value,\n  };\n\n  const self: OctironSelection & OctironHooks = Object.assign(\n    (predicate: Predicate, children?: m.Children) => {\n      const passes = predicate(self);\n\n      if (passes) {\n        return children;\n      }\n      return null;\n    },\n    {\n      isOctiron: true,\n      octironType: 'selection',\n      readonly: true,\n      id: internals.datatype,\n\n      get value() {\n        return refs.value;\n      },\n\n      get store() {\n        return internals.store;\n      },\n\n      not: (predicate: Predicate, children: m.Children) => {\n        const passes = predicate(self);\n\n        if (!passes) {\n          return children;\n        }\n        return null;\n      },\n\n      root: (\n        arg1?: Selector | OctironSelectArgs | SelectView,\n        arg2?: OctironSelectArgs | SelectView,\n        arg3?: SelectView,\n      ) => {\n        let selector: string;\n        const [childSelector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n        if (childSelector == null) {\n          selector = internals.store.rootIRI;\n        } else {\n          selector = `${internals.store.rootIRI} ${childSelector}`;\n        }\n\n        return m(SelectionRenderer, {\n          selector,\n          args,\n          view,\n          internals: {\n            store: internals.store,\n            typeDefs: args?.typeDefs || internals.typeDefs,\n            parent: self,\n          },\n        });\n      },\n\n      enter(\n        arg1: Selector,\n        arg2?: OctironSelectArgs | SelectView,\n        arg3?: SelectView,\n      ) {\n        const [selector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n        return m(SelectionRenderer, {\n          selector,\n          args,\n          view,\n          internals: {\n            store: internals.store,\n            typeDefs: args?.typeDefs || internals.typeDefs,\n            parent: self,\n          },\n        });\n      },\n\n      select: (\n        arg1: Selector,\n        arg2?: OctironSelectArgs | SelectView,\n        arg3?: SelectView,\n      ): m.Children | null => {\n        const [selector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n        if (!isJSONObject(internals.value)) {\n          return null;\n        }\n\n        return m(\n          SelectionRenderer,\n          {\n            selector,\n            args,\n            view,\n            internals: {\n              store: internals.store,\n              typeDefs: args?.typeDefs || internals.typeDefs,\n              value: internals.value,\n              parent: self,\n            },\n          },\n        );\n      },\n\n      present(args?: OctironPresentArgs<BaseAttrs>) {\n        let attrs: BaseAttrs = {} as BaseAttrs;\n        let firstPickComponent: PresentComponent<JSONValue, BaseAttrs> | undefined;\n        let fallbackComponent: PresentComponent<JSONValue> | undefined;\n\n        if (args?.attrs != null) {\n          attrs = args.attrs as BaseAttrs;\n        } else if (factoryArgs?.attrs != null) {\n          attrs = factoryArgs.attrs as unknown as BaseAttrs;\n        }\n\n        if (args?.component != null) {\n          firstPickComponent = args.component as PresentComponent<JSONValue, BaseAttrs>;\n        } else if (factoryArgs?.component != null) {\n          firstPickComponent = factoryArgs.component as unknown as PresentComponent<\n            JSONValue,\n            BaseAttrs\n          >;\n        }\n\n        if (args?.fallbackComponent != null) {\n          fallbackComponent = args.fallbackComponent as unknown as PresentComponent<JSONValue>;\n        } else if (factoryArgs?.fallbackComponent != null) {\n          fallbackComponent = factoryArgs.fallbackComponent as unknown as PresentComponent<JSONValue>;\n        }\n\n        const component = getComponent({\n          style: \"present\",\n          datatype: internals.datatype,\n          type,\n          firstPickComponent: firstPickComponent as unknown as PresentComponent,\n          fallbackComponent: fallbackComponent as unknown as PresentComponent,\n          typeDefs: args?.typeDefs || internals.typeDefs || {},\n        });\n\n        if (component == null) {\n          return null;\n        }\n\n        const { pre, sep, post, start, end, predicate } = Object.assign(\n          {},\n          factoryArgs,\n          args,\n        );\n\n        // deno-lint-ignore no-explicit-any\n        return m(component as any, {\n          o: self,\n          renderType: \"present\",\n          value: self.value,\n          attrs,\n          pre,\n          sep,\n          post,\n          start,\n          end,\n          predicate,\n        });\n      },\n\n      default(\n        arg1?: OctironDefaultArgs,\n      ) {\n        return self.present(arg1 as OctironSelectArgs)\n      },\n\n      perform: (\n        arg1?: Selector | OctironPerformArgs | PerformView,\n        arg2?: OctironPerformArgs | PerformView,\n        arg3?: PerformView,\n      ) => {\n        const [selector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n        return m(PerformRenderer, {\n          selector,\n          args,\n          view,\n          internals: {\n            octiron: self,\n            store: internals.store,\n            typeDefs: args.typeDefs || internals.typeDefs,\n          },\n        });\n      },\n\n      _updateArgs: (args: OctironSelectArgs) => {\n        for (const [key, value] of Object.entries(args)) {\n          // deno-lint-ignore no-explicit-any\n          (factoryArgs as Record<string, any>)[key] = value;\n        }\n      },\n\n      _updateValue: (value: JSONValue) => {\n        refs.value = value;\n      },\n\n    } as const,\n  ) satisfies OctironSelection & OctironHooks;\n\n  return self;\n}\n", "import type { AnyComponent, EditComponent, PresentComponent, TypeDefs } from \"../types/octiron.ts\";\n\n/**\n * @description\n * Returns a component based of Octiron's selection rules:\n *\n * 1. If the first pick component is given, return it.\n * 2. If a typedef is defined for the datatype (jsonld term or type)\n *    for the given style, return it.\n * 3. If a typedef is defined for the (or one of the) types (jsonld '@type')\n *    value for the given style, return it.\n * 4. If a fallback component is given, return it.\n *\n * @param args.style - The style of presentation.\n * @param args.datatype - The datatype the component should be configured to\n *                        handle.\n * @param args.type - The type the component should be configured to handle.\n * @param args.firstPickComponent - The component to use if passed by upstream.\n * @param args.fallbackComponent - The component to use if no other component\n *                                 is picked.\n */\nexport function getComponent({\n  style,\n  datatype,\n  type,\n  firstPickComponent,\n  typeDefs,\n  fallbackComponent,\n}: {\n  style: \"present\" | \"edit\";\n  datatype?: string;\n  type?: string | string[];\n  typeDefs: TypeDefs;\n  // deno-lint-ignore no-explicit-any\n  firstPickComponent?: PresentComponent<any>;\n  // deno-lint-ignore no-explicit-any\n  fallbackComponent?: PresentComponent<any>;\n  // deno-lint-ignore no-explicit-any\n}): PresentComponent<any> | EditComponent<any> | AnyComponent<any> | undefined {\n  if (firstPickComponent != null) {\n    return firstPickComponent;\n  }\n\n  if (\n    datatype != null &&\n    typeDefs[datatype]?.[style] != null\n  ) {\n    // deno-lint-ignore no-explicit-any\n    return typeDefs[datatype][style] as PresentComponent<any>;\n  }\n\n  if (\n    typeof type === \"string\" &&\n    typeDefs[type]?.[style] != null\n  ) {\n    // deno-lint-ignore no-explicit-any\n    return typeDefs[type][style] as PresentComponent<any>;\n  }\n\n  if (Array.isArray(type)) {\n    for (const item of type) {\n      if (\n        typeDefs[item]?.[style] != null\n      ) {\n        // deno-lint-ignore no-explicit-any\n        return typeDefs[item][style] as PresentComponent<any>;\n      }\n    }\n  }\n\n  if (typeof fallbackComponent !== \"undefined\") {\n    // deno-lint-ignore no-explicit-any\n    return fallbackComponent as PresentComponent<any>;\n  }\n}\n", "import type { ActionSelectView, Octiron, OctironActionSelectionArgs, OctironDefaultArgs, OctironEditArgs, OctironPerformArgs, OctironPresentArgs, OctironSelectArgs, PerformView, Selector, SelectView } from '../types/octiron.ts';\n\ntype AllArgs =\n  | OctironSelectArgs\n  | OctironPresentArgs\n  | OctironPerformArgs\n  | OctironActionSelectionArgs\n  | OctironEditArgs\n  | OctironDefaultArgs\n;\n\ntype AllViews =\n  | SelectView\n  | PerformView\n  | ActionSelectView\n;\n\n/**\n * @description\n * Numerous Octiron view functions take a combination of string selector,\n * object args and function view arguments.\n *\n * This `unravelArgs` identifies which arguments are present and returns\n * defaults for the missing arguments.\n *\n * @param arg1 - A selector string, args object or view function if present.\n * @param arg2 - An args object or view function if present.\n * @param arg3 - A view function if present.\n */\nexport function unravelArgs(\n  arg1?: Selector | OctironSelectArgs | SelectView,\n  arg2?: OctironSelectArgs | SelectView,\n  arg3?: SelectView,\n): [Selector, OctironSelectArgs, SelectView];\n\n\n/**\n * @description\n * Numerous Octiron view functions take a combination of string selector,\n * object args and function view arguments.\n *\n * This `unravelArgs` identifies which arguments are present and returns\n * defaults for the missing arguments.\n *\n * @param arg1 - A selector string, args object or view function if present.\n * @param arg2 - An args object or view function if present.\n * @param arg3 - A view function if present.\n */\nexport function unravelArgs(\n  arg1?: Selector | OctironPerformArgs | PerformView,\n  arg2?: OctironPerformArgs | PerformView,\n  arg3?: PerformView,\n): [Selector, OctironPerformArgs, PerformView];\n\n\n/**\n * @description\n * Numerous Octiron view functions take a combination of string selector,\n * object args and function view arguments.\n *\n * This `unravelArgs` identifies which arguments are present and returns\n * defaults for the missing arguments.\n *\n * @param arg1 - A selector string, args object or view function if present.\n * @param arg2 - An args object or view function if present.\n * @param arg3 - A view function if present.\n */\nexport function unravelArgs(\n  arg1?: Selector,\n  arg2?: OctironActionSelectionArgs | ActionSelectView,\n  arg3?: ActionSelectView,\n): [Selector, OctironActionSelectionArgs, ActionSelectView];\n\n/**\n * @description\n * Numerous Octiron view functions take a combination of string selector,\n * object args and function view arguments.\n *\n * This `unravelArgs` identifies which arguments are present and returns\n * defaults for the missing arguments.\n *\n * @param arg1 - A selector string, args object or view function if present.\n * @param arg2 - An args object or view function if present.\n */\nexport function unravelArgs(\n  arg1?: Selector | OctironPresentArgs,\n  arg2?: OctironPresentArgs,\n): [Selector, OctironSelectArgs];\n\n/**\n * @description\n * Numerous Octiron view functions take a combination of string selector,\n * object args and function view arguments.\n *\n * This `unravelArgs` identifies which arguments are present and returns\n * defaults for the missing arguments.\n *\n * @param arg1 - A selector string, args object or view function if present.\n * @param arg2 - An args object or view function if present.\n */\nexport function unravelArgs(\n  arg1?: Selector | OctironEditArgs,\n  arg2?: OctironEditArgs,\n): [Selector, OctironEditArgs];\n\n/**\n * @description\n * Numerous Octiron view functions take a combination of string selector,\n * object args and function view arguments.\n *\n * This `unravelArgs` identifies which arguments are present and returns\n * defaults for the missing arguments.\n *\n * @param arg1 - A selector string, args object or view function if present.\n * @param arg2 - An args object or view function if present.\n */\nexport function unravelArgs(\n  arg1?: Selector | OctironDefaultArgs,\n  arg2?: OctironDefaultArgs,\n): [Selector, OctironDefaultArgs];\n\n/**\n * @description\n * Numerous Octiron view functions take a combination of string selector,\n * object args and function view arguments.\n *\n * This `unravelArgs` identifies which arguments are present and returns\n * defaults for the missing arguments.\n *\n * @param arg1 - A selector string, args object or view function if present.\n * @param arg2 - An args object or view function if present.\n * @param arg3 - A view function if present.\n */\nexport function unravelArgs(\n  arg1?: Selector | AllArgs | AllViews,\n  arg2?: AllArgs | AllViews,\n  arg3?: AllViews,\n): [Selector | undefined, AllArgs, AllViews] | [Selector | undefined, AllArgs] {\n  let selector: Selector | undefined;\n  let args: AllArgs = {} as AllArgs;\n  let view: AllViews | undefined;\n\n  if (typeof arg1 === \"string\") {\n    selector = arg1;\n  } else if (typeof arg1 === \"function\") {\n    view = arg1 as SelectView;\n  } else if (arg1 != null) {\n    args = arg1;\n  }\n\n  if (typeof arg2 === 'function') {\n    view = arg2 as SelectView;\n  } else if (arg2 != null) {\n    args = arg2;\n  }\n\n  if (typeof arg3 === 'function') {\n    view = arg3;\n  }\n\n  if (typeof view === \"undefined\") {\n    view = ((o: Octiron) => o.default(args as OctironDefaultArgs)) as AllViews;\n  }\n\n  return [\n    selector,\n    args,\n    view,\n  ];\n}\n", "import type { JSONObject, JSONValue } from '../types/common.ts';\n\n/**\n * @description\n * Returns true if the input value is an object.\n *\n * @param value Any value which should come from a JSON source.\n */\nexport function isJSONObject(value: JSONValue): value is JSONObject {\n  return typeof value === 'object' && !Array.isArray(value) && value !== null;\n}\n", "import type { JSONObject, JSONValue, TypeObject } from '../types/common.ts';\nimport { isJSONObject } from \"./isJSONObject.ts\";\n\n/**\n * @description\n * Returns true if the given value is a JSON object with a JSON-ld @type value.\n *\n * @param value Any value which should come from a JSON source.\n */\nexport function isTypeObject<\n  Properties extends JSONObject = JSONObject\n>(value: JSONValue): value is TypeObject<Properties> {\n  if (!isJSONObject(value)) {\n    return false;\n  } else if (typeof value['@type'] === 'string') {\n    return true;\n  } else if (!Array.isArray(value['@type'])) {\n    return false;\n  }\n\n  for (const item of value['@type']) {\n    if (typeof item !== 'string') {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "import type { JSONValue } from \"../types/common.ts\";\nimport { isTypeObject } from \"./isTypedObject.ts\";\n\n\n/**\n * @description\n * Returns the type value of the input if it is a type object.\n *\n * @param value A JSON value which might be a typed JSON-ld object.\n */\nexport function getValueType(value: JSONValue): string | string[] | undefined {\n  if (isTypeObject(value)) {\n    return value['@type'];\n  }\n}\n", "import m from 'mithril';\nimport { JsonPointer } from 'json-ptr';\nimport { ActionStateRenderer } from \"../renderers/ActionStateRenderer.ts\";\nimport { PerformRenderer } from \"../renderers/PerformRenderer.ts\";\nimport { SelectionRenderer } from \"../renderers/SelectionRenderer.ts\";\nimport type { Store } from \"../store.ts\";\nimport type { JSONArray, JSONObject, JSONValue, Mutable, SCMAction } from \"../types/common.ts\";\nimport type { ActionSelectView, BaseAttrs, Octiron, OctironAction, OctironActionSelectionArgs, OctironDefaultArgs, OctironPerformArgs, OctironPresentArgs, OctironSelectArgs, PayloadValueMapper, PerformView, Predicate, PresentComponent, Selector, SelectView, TypeDefs, UpdateArgs } from \"../types/octiron.ts\";\nimport type { EntityState } from \"../types/store.ts\";\nimport { getComponent } from \"../utils/getComponent.ts\";\nimport { getSubmitDetails } from \"../utils/getSubmitDetails.ts\";\nimport { getValueType } from \"../utils/getValueType.ts\";\nimport { unravelArgs } from \"../utils/unravelArgs.ts\";\nimport { mithrilRedraw } from \"../utils/mithrilRedraw.ts\";\nimport { ActionSelectionRenderer } from \"../renderers/ActionSelectionRenderer.ts\";\nimport { isJSONObject } from \"../utils/isJSONObject.ts\";\n\nexport interface OctironActionHooks {\n  _updateArgs(args: OctironPerformArgs): void;\n}\n\nexport type ActionInternals = {\n  octiron: Octiron;\n  store: Store;\n  typeDefs: TypeDefs;\n};\n\nexport type ActionRefs = {\n  url?: string;\n  method: string;\n  submitting: boolean;\n  payload: JSONObject;\n  store: Store;\n  typeDefs: TypeDefs;\n  submitResult?: EntityState;\n};\n\nexport function actionFactory<\n  // deno-lint-ignore no-explicit-any\n  Attrs extends Record<string, any> = Record<string, any>,\n>(\n  internals: ActionInternals,\n  args: OctironPerformArgs<Attrs>,\n): OctironAction & OctironActionHooks {\n  const factoryArgs = Object.assign({}, args);\n  let payload: JSONObject = {};\n  let submitResult: EntityState | undefined;\n\n  if (isJSONObject(args.initialPayload)) {\n    for (const [key, value] of Object.entries(args.initialPayload)) {\n      payload[internals.store.expand(key)] = value;\n    }\n  }\n\n  const { url, method, body } = getSubmitDetails({\n    payload,\n    action: internals.octiron.value as SCMAction,\n    store: internals.store,\n  });\n\n  if (body == null) {\n    submitResult = internals.store.entity(url);\n  }\n\n  // this object is passed into children which need to keep hold of the\n  // original object but read the most recent value after mutations on\n  // on its members.\n  const refs: ActionRefs = {\n    url,\n    method,\n    submitting: false,\n    payload,\n    store: internals.store,\n    typeDefs: internals.typeDefs,\n    submitResult,\n  };\n\n  async function onSubmit() {\n    const { url, method, body, contentType, encodingType } = getSubmitDetails({\n      payload,\n      action: internals.octiron.value as SCMAction,\n      store: internals.store,\n    });\n\n    try {\n      refs.submitting = true;\n\n      mithrilRedraw();\n\n      refs.submitResult = await internals.store.submit(url, {\n        method,\n        body,\n        contentType,\n        encodingType,\n      });\n    } catch (err) {\n      console.error(err);\n    }\n\n    refs.submitting = false;\n\n    mithrilRedraw();\n  }\n\n  function onUpdate(value: JSONObject) {\n    const prev = payload;\n    const next = {\n      ...prev,\n      ...value,\n    };\n\n    if (typeof args.interceptor === 'function') {\n      payload = args.interceptor(\n        next,\n        prev,\n        internals.octiron.value as SCMAction,\n      );\n    } else {\n      payload = next;\n    }\n    // TODO: perform _updateArgs() when supported\n    self.value = refs.payload = value;\n\n    mithrilRedraw();\n  }\n\n  function onPointerUpdate(\n    pointer: string,\n    value: JSONValue,\n  ) {\n    const next: Partial<JSONObject> = Object.assign({}, payload);\n    const ptr = JsonPointer.create(pointer);\n\n    if (typeof value === 'undefined' || value === null) {\n      ptr.unset(next) as Partial<JSONObject>;\n    } else {\n      ptr.set(next, value, true) as Partial<JSONObject>;\n    }\n\n    onUpdate(next);\n  }\n\n  const self: Mutable<OctironAction & OctironActionHooks> = function self(\n    predicate: Predicate,\n    children?: m.Children,\n  ) {\n    const passes = predicate(self as OctironAction);\n\n    if (passes) {\n      return children;\n    }\n\n    return null;\n  } as OctironAction & OctironActionHooks;\n\n  self.isOctiron = true;\n  self.octironType = 'action';\n  self.readonly = false;\n  self.value = refs.payload;\n  self.action = internals.octiron;\n  self.actionValue = internals.octiron;\n\n  self.submit = async function (\n    arg1?: PayloadValueMapper<JSONObject> | JSONObject\n  ): Promise<void> {\n    if (typeof arg1 === 'function') {\n      onUpdate(arg1(payload));\n    } else if (arg1 != null) {\n      onUpdate(arg1);\n    }\n\n    return await onSubmit();\n  } as OctironAction['submit'];\n\n  self.update = async function (\n    arg1: PayloadValueMapper<JSONObject> | JSONObject,\n    args?: UpdateArgs,\n  ): Promise<void> {\n    if (typeof arg1 === 'function') {\n      onUpdate(arg1(payload));\n    } else if (arg1 != null) {\n      onUpdate(arg1);\n    }\n\n    if (args?.submit || args?.submitOnChange) {\n      await onSubmit();\n    } else {\n      mithrilRedraw();\n    }\n  } as OctironAction['update'];\n\n\n  self.not = function(\n    predicate: Predicate,\n    children: m.Children,\n  ): m.Children {\n    if (self == null) {\n      return null;\n    }\n\n    const passes = predicate(self as unknown as OctironAction);\n\n    if (!passes) {\n      return children;\n    }\n\n    return null;\n  };\n\n  self.root = function (\n    arg1?: Selector | OctironSelectArgs | SelectView,\n    arg2?: OctironSelectArgs | SelectView,\n    arg3?: SelectView,\n  ): m.Children {\n    let selector: string;\n    const [childSelector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n    if (childSelector == null) {\n      selector = internals.store.rootIRI;\n    } else {\n      selector = `${internals.store.rootIRI} ${childSelector}`;\n    }\n\n    return m(SelectionRenderer, {\n      selector,\n      args,\n      view,\n      internals: {\n        store: internals.store,\n        typeDefs: args?.typeDefs || factoryArgs?.typeDefs || internals.typeDefs,\n        parent: self as unknown as OctironAction,\n      },\n    });\n  };\n\n  self.enter = function(\n    arg1: Selector,\n    arg2?: OctironSelectArgs | SelectView,\n    arg3?: SelectView,\n  ): m.Children {\n    const [selector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n    return m(SelectionRenderer, {\n      selector,\n      args,\n      view,\n      internals: {\n        store: internals.store,\n        typeDefs: args?.typeDefs || factoryArgs?.typeDefs || internals.typeDefs,\n        parent: self as unknown as OctironAction,\n      },\n    });\n  };\n\n  self.present = function(\n    args?: OctironPresentArgs<BaseAttrs>,\n  ): m.Children {\n    let attrs: BaseAttrs = {} as BaseAttrs;\n    let firstPickComponent: PresentComponent<JSONObject, BaseAttrs> | undefined;\n    let fallbackComponent: PresentComponent<JSONObject> | undefined;\n\n    if (args?.attrs != null) {\n      attrs = args.attrs as BaseAttrs;\n    } else if (factoryArgs?.attrs != null) {\n      attrs = factoryArgs.attrs as unknown as BaseAttrs;\n    }\n\n    if (args?.component != null) {\n      firstPickComponent = args.component as PresentComponent<JSONObject, BaseAttrs>;\n    } else if (factoryArgs?.component != null) {\n      firstPickComponent = factoryArgs.component as unknown as PresentComponent<\n        JSONObject,\n        BaseAttrs\n      >;\n    }\n\n    if (args?.fallbackComponent != null) {\n      fallbackComponent = args.fallbackComponent as unknown as PresentComponent<JSONObject>;\n    } else if (factoryArgs?.fallbackComponent != null) {\n      fallbackComponent = factoryArgs.fallbackComponent as unknown as PresentComponent<JSONObject>;\n    }\n\n    const component = getComponent({\n      style: \"present\",\n      type: getValueType(internals.octiron.value),\n      firstPickComponent: firstPickComponent as unknown as PresentComponent,\n      fallbackComponent: fallbackComponent as unknown as PresentComponent,\n      typeDefs: args?.typeDefs || internals.typeDefs || {},\n    });\n\n    if (component == null) {\n      return null;\n    }\n\n    const { pre, sep, post, start, end, predicate } = Object.assign(\n      {},\n      factoryArgs,\n      args,\n    );\n\n    // deno-lint-ignore no-explicit-any\n    return m(component as any, {\n      o: self,\n      renderType: \"present\",\n      value: self.value,\n      attrs,\n      pre,\n      sep,\n      post,\n      start,\n      end,\n      predicate,\n    });\n  };\n\n  self.default = function (\n    args?: OctironDefaultArgs,\n  ): m.Children {\n    return self.present(args as OctironPresentArgs);\n  };\n\n  self.initial = function (\n    children: m.Children\n  ): m.Children {\n    return m(\n      ActionStateRenderer,\n      {\n        type: 'initial',\n        refs,\n      },\n      children,\n    );\n  };\n\n  self.success = function (\n    arg1?: Selector | OctironSelectArgs | SelectView,\n    arg2?: OctironSelectArgs | SelectView,\n    arg3?: SelectView,\n  ): m.Children {\n    const [selector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n    return m(ActionStateRenderer, {\n      type: 'success',\n      selector,\n      args,\n      view,\n      refs,\n    });\n  };\n\n  self.failure = function (\n    arg1?: Selector | OctironSelectArgs | SelectView,\n    arg2?: OctironSelectArgs | SelectView,\n    arg3?: SelectView,\n  ) {\n    const [selector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n    return m(ActionStateRenderer, {\n      type: 'failure',\n      selector,\n      args,\n      view,\n      refs,\n    });\n  };\n\n  self.select = function (\n    arg1: Selector,\n    arg2?: OctironActionSelectionArgs | ActionSelectView,\n    arg3?: ActionSelectView,\n  ): m.Children | null {\n    const [selector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n    return m(\n      ActionSelectionRenderer,\n      {\n        internals: {\n          action: self as unknown as OctironAction,\n          parent: self as unknown as OctironAction,\n          entity: internals.octiron,\n          store: internals.store,\n          typeDefs: internals.typeDefs,\n          onSubmit,\n          onUpdate: onPointerUpdate,\n          submitting: refs.submitting,\n        },\n        selector,\n        value: self.value,\n        actionValue: internals.octiron.value as JSONObject,\n        args,\n        view,\n      }\n    );\n  };\n\n  self.perform = function (\n    arg1?: Selector | OctironPerformArgs | PerformView,\n    arg2?: OctironPerformArgs | PerformView,\n    arg3?: PerformView,\n  ): m.Children {\n    const [selector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n    return m(PerformRenderer, {\n      selector,\n      args,\n      view,\n      internals: {\n        octiron: self as unknown as OctironAction,\n        store: internals.store,\n        typeDefs: internals.typeDefs,\n      },\n    });\n  };\n\n  self.append = function (\n    termOrType: string,\n    value: JSONValue = {},\n    args: UpdateArgs = {},\n  ) {\n    const type = internals.store.expand(termOrType);\n\n    if (isJSONObject(self.value)) {\n      const prevValue = self.value[type];\n      let nextValue: JSONArray = [];\n\n      if (prevValue != null && !Array.isArray(prevValue)) {\n        nextValue.push(prevValue);\n      } else if (Array.isArray(prevValue)) {\n        nextValue = [...prevValue];\n      }\n\n      nextValue.push(value);\n\n      return self.update({\n        ...self.value,\n        [type]: nextValue,\n      }, args);\n    }\n  };\n\n  self._updateArgs = function (\n    args: OctironPerformArgs,\n  ) {\n    for (const [key, value] of Object.entries(args)) {\n      // deno-lint-ignore no-explicit-any\n      (factoryArgs as Record<string, any>)[key] = value;\n    }\n  };\n\n  if (\n    typeof window === 'undefined' && args.submitOnInit &&\n    submitResult == null\n  ) {\n    self.submit();\n  } else if (typeof window !== 'undefined' && args.submitOnInit) {\n    self.submit();\n  }\n\n  return self as OctironAction & OctironActionHooks;\n}\n", "import {\n  JsonStringPointer,\n  UriFragmentIdentifierPointer,\n  Pointer,\n  RelativeJsonPointer,\n  PathSegment,\n  PathSegments,\n  Decoder,\n} from './types';\n\nexport function replace(source: string, find: string, repl: string): string {\n  let res = '';\n  let rem = source;\n  let beg = 0;\n  let end = -1;\n  while ((end = rem.indexOf(find)) > -1) {\n    res += source.substring(beg, beg + end) + repl;\n    rem = rem.substring(end + find.length, rem.length);\n    beg += end + find.length;\n  }\n  if (rem.length > 0) {\n    res += source.substring(source.length - rem.length, source.length);\n  }\n  return res;\n}\n\nexport function decodeFragmentSegments(segments: PathSegments): PathSegments {\n  let i = -1;\n  const len = segments.length;\n  const res = new Array(len);\n  while (++i < len) {\n    if (typeof segments[i] === 'string') {\n      res[i] = replace(\n        replace(decodeURIComponent(segments[i] as string), '~1', '/'),\n        '~0',\n        '~',\n      );\n    } else {\n      res[i] = segments[i];\n    }\n  }\n  return res;\n}\n\nexport function encodeFragmentSegments(segments: PathSegments): PathSegments {\n  let i = -1;\n  const len = segments.length;\n  const res = new Array(len);\n  while (++i < len) {\n    if (typeof segments[i] === 'string') {\n      res[i] = encodeURIComponent(\n        replace(replace(segments[i] as string, '~', '~0'), '/', '~1'),\n      );\n    } else {\n      res[i] = segments[i];\n    }\n  }\n  return res;\n}\n\nexport function decodePointerSegments(segments: PathSegments): PathSegments {\n  let i = -1;\n  const len = segments.length;\n  const res = new Array(len);\n  while (++i < len) {\n    if (typeof segments[i] === 'string') {\n      res[i] = replace(replace(segments[i] as string, '~1', '/'), '~0', '~');\n    } else {\n      res[i] = segments[i];\n    }\n  }\n  return res;\n}\n\nexport function encodePointerSegments(segments: PathSegments): PathSegments {\n  let i = -1;\n  const len = segments.length;\n  const res = new Array(len);\n  while (++i < len) {\n    if (typeof segments[i] === 'string') {\n      res[i] = replace(replace(segments[i] as string, '~', '~0'), '/', '~1');\n    } else {\n      res[i] = segments[i];\n    }\n  }\n  return res;\n}\n\nexport function decodePointer(ptr: Pointer): PathSegments {\n  if (typeof ptr !== 'string') {\n    throw new TypeError(\n      'Invalid type: JSON Pointers are represented as strings.',\n    );\n  }\n  if (ptr.length === 0) {\n    return [];\n  }\n  if (ptr[0] !== '/') {\n    throw new ReferenceError(\n      'Invalid JSON Pointer syntax. Non-empty pointer must begin with a solidus `/`.',\n    );\n  }\n  return decodePointerSegments(ptr.substring(1).split('/'));\n}\n\nexport function encodePointer(path: PathSegments): JsonStringPointer {\n  if (!path || (path && !Array.isArray(path))) {\n    throw new TypeError('Invalid type: path must be an array of segments.');\n  }\n  if (path.length === 0) {\n    return '';\n  }\n  return '/'.concat(encodePointerSegments(path).join('/'));\n}\n\nexport function decodeUriFragmentIdentifier(\n  ptr: UriFragmentIdentifierPointer,\n): PathSegments {\n  if (typeof ptr !== 'string') {\n    throw new TypeError(\n      'Invalid type: JSON Pointers are represented as strings.',\n    );\n  }\n  if (ptr.length === 0 || ptr[0] !== '#') {\n    throw new ReferenceError(\n      'Invalid JSON Pointer syntax; URI fragment identifiers must begin with a hash.',\n    );\n  }\n  if (ptr.length === 1) {\n    return [];\n  }\n  if (ptr[1] !== '/') {\n    throw new ReferenceError('Invalid JSON Pointer syntax.');\n  }\n  return decodeFragmentSegments(ptr.substring(2).split('/'));\n}\n\nexport function encodeUriFragmentIdentifier(\n  path: PathSegments,\n): UriFragmentIdentifierPointer {\n  if (!path || (path && !Array.isArray(path))) {\n    throw new TypeError('Invalid type: path must be an array of segments.');\n  }\n  if (path.length === 0) {\n    return '#';\n  }\n  return '#/'.concat(encodeFragmentSegments(path).join('/'));\n}\n\nconst InvalidRelativePointerError =\n  'Invalid Relative JSON Pointer syntax. Relative pointer must begin with a non-negative integer, followed by either the number sign (#), or a JSON Pointer.';\n\nexport function decodeRelativePointer(ptr: RelativeJsonPointer): PathSegments {\n  if (typeof ptr !== 'string') {\n    throw new TypeError(\n      'Invalid type: Relative JSON Pointers are represented as strings.',\n    );\n  }\n  if (ptr.length === 0) {\n    // https://tools.ietf.org/id/draft-handrews-relative-json-pointer-00.html#rfc.section.3\n    throw new ReferenceError(InvalidRelativePointerError);\n  }\n  const segments = ptr.split('/');\n  let first = segments[0];\n  // It is a name reference; strip the hash.\n  if (first[first.length - 1] == '#') {\n    if (segments.length > 1) {\n      throw new ReferenceError(InvalidRelativePointerError);\n    }\n    first = first.substr(0, first.length - 1);\n  }\n  let i = -1;\n  const len = first.length;\n  while (++i < len) {\n    if (first[i] < '0' || first[i] > '9') {\n      throw new ReferenceError(InvalidRelativePointerError);\n    }\n  }\n  const path: unknown[] = decodePointerSegments(segments.slice(1));\n  path.unshift(segments[0]);\n  return path as PathSegments;\n}\n\nexport function toArrayIndexReference(\n  arr: readonly unknown[],\n  idx: PathSegment,\n): number {\n  if (typeof idx === 'number') return idx;\n  const len = idx.length;\n  if (!len) return -1;\n  let cursor = 0;\n  if (len === 1 && idx[0] === '-') {\n    if (!Array.isArray(arr)) {\n      return 0;\n    }\n    return arr.length;\n  }\n  while (++cursor < len) {\n    if (idx[cursor] < '0' || idx[cursor] > '9') {\n      return -1;\n    }\n  }\n  return parseInt(idx, 10);\n}\n\nexport type Dereference = (it: unknown) => unknown;\n\nexport function compilePointerDereference(path: PathSegments): Dereference {\n  let body = \"if (typeof(it) !== 'undefined'\";\n  if (path.length === 0) {\n    return (it): unknown => it;\n  }\n  body = path.reduce((body, _, i) => {\n    return (\n      body +\n      \"\\n\\t&& it !== null && typeof((it = it['\" +\n      replace(replace(path[i] + '', '\\\\', '\\\\\\\\'), \"'\", \"\\\\'\") +\n      \"'])) !== 'undefined'\"\n    );\n  }, \"if (typeof(it) !== 'undefined'\") as string;\n  body = body + ') {\\n\\treturn it;\\n }';\n  // eslint-disable-next-line no-new-func\n  return new Function('it', body) as Dereference;\n}\n\nexport function setValueAtPath(\n  target: unknown,\n  val: unknown,\n  path: PathSegments,\n  force = false,\n): unknown {\n  if (path.length === 0) {\n    throw new Error('Cannot set the root object; assign it directly.');\n  }\n  if (typeof target === 'undefined') {\n    throw new TypeError('Cannot set values on undefined');\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let it: any = target;\n  const len = path.length;\n  const end = path.length - 1;\n  let step: PathSegment;\n  let cursor = -1;\n  let rem: unknown;\n  let p: number;\n  while (++cursor < len) {\n    step = path[cursor];\n    if (typeof step !== 'string' && typeof step !== 'number') {\n      throw new TypeError('PathSegments must be a string or a number.');\n    }\n    if (\n      // Reconsider this strategy. It disallows legitimate structures on\n      // non - objects, or more precisely, on objects not derived from a class\n      // or constructor function.\n      step === '__proto__' ||\n      step === 'constructor' ||\n      step === 'prototype'\n    ) {\n      throw new Error('Attempted prototype pollution disallowed.');\n    }\n    if (Array.isArray(it)) {\n      if (step === '-' && cursor === end) {\n        it.push(val);\n        return undefined;\n      }\n      p = toArrayIndexReference(it, step);\n      if (it.length > p) {\n        if (cursor === end) {\n          rem = it[p];\n          it[p] = val;\n          break;\n        }\n        it = it[p];\n      } else if (cursor === end && p === it.length) {\n        if (force) {\n          it.push(val);\n          return undefined;\n        }\n      } else if (force) {\n        it = it[p] = cursor === end ? val : {};\n      }\n    } else {\n      if (typeof it[step] === 'undefined') {\n        if (force) {\n          if (cursor === end) {\n            it[step] = val;\n            return undefined;\n          }\n          // if the next step is an array index, this step should be an array.\n          const n = Number(path[cursor + 1]);\n          if (\n            Number.isInteger(n) &&\n            toArrayIndexReference(it[step], n) !== -1\n          ) {\n            it = it[step] = [];\n            continue;\n          }\n          it = it[step] = {};\n          continue;\n        }\n        return undefined;\n      }\n      if (cursor === end) {\n        rem = it[step];\n        it[step] = val;\n        break;\n      }\n      it = it[step];\n    }\n  }\n  return rem;\n}\n\nexport function unsetValueAtPath(target: unknown, path: PathSegments): unknown {\n  if (path.length === 0) {\n    throw new Error('Cannot unset the root object; assign it directly.');\n  }\n  if (typeof target === 'undefined') {\n    throw new TypeError('Cannot unset values on undefined');\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let it: any = target;\n  const len = path.length;\n  const end = path.length - 1;\n  let step: PathSegment;\n  let cursor = -1;\n  let rem: unknown;\n  let p: number;\n  while (++cursor < len) {\n    step = path[cursor];\n    if (typeof step !== 'string' && typeof step !== 'number') {\n      throw new TypeError('PathSegments must be a string or a number.');\n    }\n    if (\n      step === '__proto__' ||\n      step === 'constructor' ||\n      step === 'prototype'\n    ) {\n      throw new Error('Attempted prototype pollution disallowed.');\n    }\n    if (Array.isArray(it)) {\n      p = toArrayIndexReference(it, step);\n      if (p >= it.length) return undefined;\n      if (cursor === end) {\n        rem = it[p];\n        delete it[p];\n        break;\n      }\n      it = it[p];\n    } else {\n      if (typeof it[step] === 'undefined') {\n        return undefined;\n      }\n      if (cursor === end) {\n        rem = it[step];\n        delete it[step];\n        break;\n      }\n      it = it[step];\n    }\n  }\n  return rem;\n}\n\nexport function looksLikeFragment(ptr: Pointer): boolean {\n  return typeof ptr === 'string' && ptr.length > 0 && ptr[0] === '#';\n}\n\nexport function pickDecoder(ptr: Pointer): Decoder {\n  return looksLikeFragment(ptr) ? decodeUriFragmentIdentifier : decodePointer;\n}\n\nexport function decodePtrInit(ptr: Pointer | PathSegments): PathSegments {\n  return Array.isArray(ptr)\n    ? ptr.slice(0)\n    : pickDecoder(ptr as Pointer)(ptr as Pointer);\n}\n", "import {\n  Dereference,\n  decodePtrInit,\n  compilePointerDereference,\n  setValueAtPath,\n  encodePointer,\n  encodeUriFragmentIdentifier,\n  pickDecoder,\n  unsetValueAtPath,\n  decodeRelativePointer,\n} from './util';\nimport {\n  JsonStringPointer,\n  UriFragmentIdentifierPointer,\n  Pointer,\n  RelativeJsonPointer,\n  PathSegments,\n  Encoder,\n  JsonStringPointerListItem,\n  UriFragmentIdentifierPointerListItem,\n} from './types';\n\n/**\n * Determines if the value is an object (not null)\n * @param value the value\n * @returns true if the value is a non-null object; otherwise false.\n *\n * @hidden\n */\nfunction isObject(value: unknown): boolean {\n  return typeof value === 'object' && value !== null;\n}\n\n/**\n * Signature of visitor functions, used with [[JsonPointer.visit]] method. Visitors are callbacks invoked for every segment/branch of a target's object graph.\n *\n * Tree descent occurs in-order, breadth first.\n */\nexport type Visitor = (ptr: JsonStringPointer, val: unknown) => void;\n\n/** @hidden */\ninterface Item {\n  obj: unknown;\n  path: PathSegments;\n}\n\n/** @hidden */\nfunction shouldDescend(obj: unknown): boolean {\n  return isObject(obj) && !JsonReference.isReference(obj);\n}\n/** @hidden */\nfunction descendingVisit(\n  target: unknown,\n  visitor: Visitor,\n  encoder: Encoder,\n): void {\n  const distinctObjects = new Map<unknown, JsonPointer>();\n  const q: Item[] = [{ obj: target, path: [] }];\n  while (q.length) {\n    const { obj, path } = q.shift() as Item;\n    visitor(encoder(path), obj);\n    if (shouldDescend(obj)) {\n      distinctObjects.set(\n        obj,\n        new JsonPointer(encodeUriFragmentIdentifier(path)),\n      );\n      if (!Array.isArray(obj)) {\n        const keys = Object.keys(obj as Record<string, unknown>);\n        const len = keys.length;\n        let i = -1;\n        while (++i < len) {\n          const it = (obj as Record<string, unknown>)[keys[i]];\n          if (isObject(it) && distinctObjects.has(it)) {\n            q.push({\n              obj: new JsonReference(distinctObjects.get(it) as JsonPointer),\n              path: path.concat(keys[i]),\n            });\n          } else {\n            q.push({\n              obj: it,\n              path: path.concat(keys[i]),\n            });\n          }\n        }\n      } else {\n        // handleArray\n        let j = -1;\n        const len = obj.length;\n        while (++j < len) {\n          const it = obj[j];\n          if (isObject(it) && distinctObjects.has(it)) {\n            q.push({\n              obj: new JsonReference(distinctObjects.get(it) as JsonPointer),\n              path: path.concat([j + '']),\n            });\n          } else {\n            q.push({\n              obj: it,\n              path: path.concat([j + '']),\n            });\n          }\n        }\n      }\n    }\n  }\n}\n\n/** @hidden */\nconst $ptr = Symbol('pointer');\n/** @hidden */\nconst $frg = Symbol('fragmentId');\n/** @hidden */\nconst $get = Symbol('getter');\n\n/**\n * Represents a JSON Pointer, capable of getting and setting the value on target\n * objects at the pointer's location.\n *\n * While there are static variants for most operations, our recommendation is\n * to use the instance level methods, which enables you avoid repeated\n * compiling/emitting transient accessors. Take a look at the speed comparisons\n * for our justification.\n *\n * In most cases, you should create and reuse instances of JsonPointer within\n * scope that makes sense for your app. We often create constants for frequently\n * used pointers, but your use case may vary.\n *\n * The following is a contrived example showing a function that uses pointers to\n * deal with changes in the structure of data (a version independent function):\n *\n * ```ts\n * import { JsonPointer } from 'json-ptr';\n *\n * export type SupportedVersion = '1.0' | '1.1';\n *\n * interface PrimaryGuestNamePointers {\n *   name: JsonPointer;\n *   surname: JsonPointer;\n *   honorific: JsonPointer;\n * }\n * const versions: Record<SupportedVersion, PrimaryGuestNamePointers> = {\n *   '1.0': {\n *     name: JsonPointer.create('/guests/0/name'),\n *     surname: JsonPointer.create('/guests/0/surname'),\n *     honorific: JsonPointer.create('/guests/0/honorific'),\n *   },\n *   '1.1': {\n *     name: JsonPointer.create('/primary/primaryGuest/name'),\n *     surname: JsonPointer.create('/primary/primaryGuest/surname'),\n *     honorific: JsonPointer.create('/primary/primaryGuest/honorific'),\n *   }\n * };\n *\n * interface Reservation extends Record<string, unknown> {\n *   version?: SupportedVersion;\n * }\n *\n * function primaryGuestName(reservation: Reservation): string {\n *   const pointers = versions[reservation.version || '1.0'];\n *   const name = pointers.name.get(reservation) as string;\n *   const surname = pointers.surname.get(reservation) as string;\n *   const honorific = pointers.honorific.get(reservation) as string;\n *   const names: string[] = [];\n *   if (honorific) names.push(honorific);\n *   if (name) names.push(name);\n *   if (surname) names.push(surname);\n *   return names.join(' ');\n * }\n *\n * // The original layout of a reservation (only the parts relevant to our example)\n * const reservationV1: Reservation = {\n *   guests: [{\n *     name: 'Wilbur',\n *     surname: 'Finkle',\n *     honorific: 'Mr.'\n *   }, {\n *     name: 'Wanda',\n *     surname: 'Finkle',\n *     honorific: 'Mrs.'\n *   }, {\n *     name: 'Wilma',\n *     surname: 'Finkle',\n *     honorific: 'Miss',\n *     child: true,\n *     age: 12\n *   }]\n *   // ...\n * };\n *\n * // The new layout of a reservation (only the parts relevant to our example)\n * const reservationV1_1: Reservation = {\n *   version: '1.1',\n *   primary: {\n *     primaryGuest: {\n *       name: 'Wilbur',\n *       surname: 'Finkle',\n *       honorific: 'Mr.'\n *     },\n *     additionalGuests: [{\n *       name: 'Wanda',\n *       surname: 'Finkle',\n *       honorific: 'Mrs.'\n *     }, {\n *       name: 'Wilma',\n *       surname: 'Finkle',\n *       honorific: 'Miss',\n *       child: true,\n *       age: 12\n *     }]\n *     // ...\n *   }\n *   // ...\n * };\n *\n * console.log(primaryGuestName(reservationV1));\n * console.log(primaryGuestName(reservationV1_1));\n *\n * ```\n *\n * There are many uses for pointers.\n */\nexport class JsonPointer {\n  /** @hidden */\n  private [$ptr]: JsonStringPointer;\n  /** @hidden */\n  private [$frg]: UriFragmentIdentifierPointer;\n  /** @hidden */\n  private [$get]: Dereference;\n\n  /**\n   * Factory function that creates a JsonPointer instance.\n   *\n   * ```ts\n   * const ptr = JsonPointer.create('/deeply/nested/data/0/here');\n   * ```\n   * _or_\n   * ```ts\n   * const ptr = JsonPointer.create(['deeply', 'nested', 'data', 0, 'here']);\n   * ```\n   * @param pointer the pointer or path.\n   */\n  static create(pointer: Pointer | PathSegments): JsonPointer {\n    return new JsonPointer(pointer);\n  }\n\n  /**\n   * Determines if the specified `target`'s object graph has a value at the `pointer`'s location.\n   *\n   * ```ts\n   * const target = {\n   *   first: 'second',\n   *   third: ['fourth', 'fifth', { sixth: 'seventh' }],\n   *   eighth: 'ninth'\n   * };\n   *\n   * console.log(JsonPointer.has(target, '/third/0'));\n   * // true\n   * console.log(JsonPointer.has(target, '/tenth'));\n   * // false\n   * ```\n   *\n   * @param target the target of the operation\n   * @param pointer the pointer or path\n   */\n  static has(\n    target: unknown,\n    pointer: Pointer | PathSegments | JsonPointer,\n  ): boolean {\n    if (typeof pointer === 'string' || Array.isArray(pointer)) {\n      pointer = new JsonPointer(pointer);\n    }\n    return (pointer as JsonPointer).has(target);\n  }\n\n  /**\n   * Gets the `target` object's value at the `pointer`'s location.\n   *\n   * ```ts\n   * const target = {\n   *   first: 'second',\n   *   third: ['fourth', 'fifth', { sixth: 'seventh' }],\n   *   eighth: 'ninth'\n   * };\n   *\n   * console.log(JsonPointer.get(target, '/third/2/sixth'));\n   * // seventh\n   * console.log(JsonPointer.get(target, '/tenth'));\n   * // undefined\n   * ```\n   *\n   * @param target the target of the operation\n   * @param pointer the pointer or path.\n   */\n  static get(\n    target: unknown,\n    pointer: Pointer | PathSegments | JsonPointer,\n  ): unknown {\n    if (typeof pointer === 'string' || Array.isArray(pointer)) {\n      pointer = new JsonPointer(pointer);\n    }\n    return (pointer as JsonPointer).get(target);\n  }\n\n  /**\n   * Sets the `target` object's value, as specified, at the `pointer`'s location.\n   *\n   * ```ts\n   * const target = {\n   *   first: 'second',\n   *   third: ['fourth', 'fifth', { sixth: 'seventh' }],\n   *   eighth: 'ninth'\n   * };\n   *\n   * console.log(JsonPointer.set(target, '/third/2/sixth', 'tenth'));\n   * // seventh\n   * console.log(JsonPointer.set(target, '/tenth', 'eleventh', true));\n   * // undefined\n   * console.log(JSON.stringify(target, null, ' '));\n   * // {\n   * // \"first\": \"second\",\n   * // \"third\": [\n   * //  \"fourth\",\n   * //  \"fifth\",\n   * //  {\n   * //   \"sixth\": \"tenth\"\n   * //  }\n   * // ],\n   * // \"eighth\": \"ninth\",\n   * // \"tenth\": \"eleventh\"\n   * // }\n   * ```\n   *\n   * @param target the target of the operation\n   * @param pointer the pointer or path\n   * @param val a value to write into the object graph at the specified pointer location\n   * @param force indications whether the operation should force the pointer's location into existence in the object graph.\n   *\n   * @returns the prior value at the pointer's location in the object graph.\n   */\n  static set(\n    target: unknown,\n    pointer: Pointer | PathSegments | JsonPointer,\n    val: unknown,\n    force = false,\n  ): unknown {\n    if (typeof pointer === 'string' || Array.isArray(pointer)) {\n      pointer = new JsonPointer(pointer);\n    }\n    return (pointer as JsonPointer).set(target, val, force);\n  }\n\n  /**\n   * Removes the `target` object's value at the `pointer`'s location.\n   *\n   * ```ts\n   * const target = {\n   *   first: 'second',\n   *   third: ['fourth', 'fifth', { sixth: 'seventh' }],\n   *   eighth: 'ninth'\n   * };\n   *\n   * console.log(JsonPointer.unset(target, '/third/2/sixth'));\n   * // seventh\n   * console.log(JsonPointer.unset(target, '/tenth'));\n   * // undefined\n   * console.log(JSON.stringify(target, null, ' '));\n   * // {\n   * // \"first\": \"second\",\n   * // \"third\": [\n   * //  \"fourth\",\n   * //  \"fifth\",\n   * //  {}\n   * // ],\n   * // \"eighth\": \"ninth\",\n   * // }\n   * ```\n   * @param target the target of the operation\n   * @param pointer the pointer or path\n   *\n   * @returns the value that was removed from the object graph.\n   */\n  static unset(\n    target: unknown,\n    pointer: Pointer | PathSegments | JsonPointer,\n  ): unknown {\n    if (typeof pointer === 'string' || Array.isArray(pointer)) {\n      pointer = new JsonPointer(pointer);\n    }\n    return (pointer as JsonPointer).unset(target);\n  }\n\n  /**\n   * Decodes the specified pointer into path segments.\n   * @param pointer a string representation of a JSON Pointer\n   */\n  static decode(pointer: Pointer): PathSegments {\n    return pickDecoder(pointer)(pointer);\n  }\n\n  /**\n   * Evaluates the target's object graph, calling the specified visitor for every unique pointer location discovered while walking the graph.\n   * @param target the target of the operation\n   * @param visitor a callback function invoked for each unique pointer location in the object graph\n   * @param fragmentId indicates whether the visitor should receive fragment identifiers or regular pointers\n   */\n  static visit(target: unknown, visitor: Visitor, fragmentId = false): void {\n    descendingVisit(\n      target,\n      visitor,\n      fragmentId ? encodeUriFragmentIdentifier : encodePointer,\n    );\n  }\n\n  /**\n   * Evaluates the target's object graph, returning a [[JsonStringPointerListItem]] for each location in the graph.\n   * @param target the target of the operation\n   */\n  static listPointers(target: unknown): JsonStringPointerListItem[] {\n    const res: JsonStringPointerListItem[] = [];\n    descendingVisit(\n      target,\n      (pointer, value): void => {\n        res.push({ pointer, value });\n      },\n      encodePointer,\n    );\n    return res;\n  }\n\n  /**\n   * Evaluates the target's object graph, returning a [[UriFragmentIdentifierPointerListItem]] for each location in the graph.\n   * @param target the target of the operation\n   */\n  static listFragmentIds(\n    target: unknown,\n  ): UriFragmentIdentifierPointerListItem[] {\n    const res: UriFragmentIdentifierPointerListItem[] = [];\n    descendingVisit(\n      target,\n      (fragmentId, value): void => {\n        res.push({ fragmentId, value });\n      },\n      encodeUriFragmentIdentifier,\n    );\n    return res;\n  }\n\n  /**\n   * Evaluates the target's object graph, returning a Record&lt;Pointer, unknown> populated with pointers and the corresponding values from the graph.\n   * @param target the target of the operation\n   * @param fragmentId indicates whether the results are populated with fragment identifiers rather than regular pointers\n   */\n  static flatten(\n    target: unknown,\n    fragmentId = false,\n  ): Record<Pointer, unknown> {\n    const res: Record<Pointer, unknown> = {};\n    descendingVisit(\n      target,\n      (p, v) => {\n        res[p] = v;\n      },\n      fragmentId ? encodeUriFragmentIdentifier : encodePointer,\n    );\n    return res;\n  }\n\n  /**\n   * Evaluates the target's object graph, returning a Map&lt;Pointer,unknown>  populated with pointers and the corresponding values form the graph.\n   * @param target the target of the operation\n   * @param fragmentId indicates whether the results are populated with fragment identifiers rather than regular pointers\n   */\n  static map(target: unknown, fragmentId = false): Map<Pointer, unknown> {\n    const res = new Map<Pointer, unknown>();\n    descendingVisit(\n      target,\n      res.set.bind(res),\n      fragmentId ? encodeUriFragmentIdentifier : encodePointer,\n    );\n    return res;\n  }\n\n  /**\n   * The pointer's decoded path segments.\n   */\n  public readonly path: PathSegments;\n\n  /**\n   * Creates a new instance.\n   * @param ptr a string representation of a JSON Pointer, or a decoded array of path segments.\n   */\n  constructor(ptr: Pointer | PathSegments) {\n    this.path = decodePtrInit(ptr);\n  }\n\n  /**\n   * Gets the target object's value at the pointer's location.\n   * @param target the target of the operation\n   */\n  get(target: unknown): unknown {\n    if (!this[$get]) {\n      this[$get] = compilePointerDereference(this.path);\n    }\n    return this[$get](target);\n  }\n\n  /**\n   * Sets the target object's value, as specified, at the pointer's location.\n   *\n   * If any part of the pointer's path does not exist, the operation aborts\n   * without modification, unless the caller indicates that pointer's location\n   * should be created.\n   *\n   * @param target the target of the operation\n   * @param value the value to set\n   * @param force indicates whether the pointer's location should be created if it doesn't already exist.\n   */\n  set(target: unknown, value: unknown, force = false): unknown {\n    return setValueAtPath(target, value, this.path, force);\n  }\n\n  /**\n   * Removes the target object's value at the pointer's location.\n   * @param target the target of the operation\n   *\n   * @returns the value that was removed from the object graph.\n   */\n  unset(target: unknown): unknown {\n    return unsetValueAtPath(target, this.path);\n  }\n\n  /**\n   * Determines if the specified target's object graph has a value at the pointer's location.\n   * @param target the target of the operation\n   */\n  has(target: unknown): boolean {\n    return typeof this.get(target) !== 'undefined';\n  }\n\n  /**\n   * Gets the value in the object graph that is the parent of the pointer location.\n   * @param target the target of the operation\n   */\n  parent(target: unknown): unknown {\n    const p = this.path;\n    if (p.length == 1) return undefined;\n    const parent = new JsonPointer(p.slice(0, p.length - 1));\n    return parent.get(target);\n  }\n\n  /**\n   * Creates a new JsonPointer instance, pointing to the specified relative location in the object graph.\n   * @param ptr the relative pointer (relative to this)\n   * @returns A new instance that points to the relative location.\n   */\n  relative(ptr: RelativeJsonPointer): JsonPointer {\n    const p = this.path;\n    const decoded = decodeRelativePointer(ptr) as string[];\n    const n = parseInt(decoded[0]);\n    if (n > p.length) throw new Error('Relative location does not exist.');\n    const r = p.slice(0, p.length - n).concat(decoded.slice(1));\n    if (decoded[0][decoded[0].length - 1] == '#') {\n      // It references the path segment/name, not the value\n      const name = r[r.length - 1] as string;\n      throw new Error(\n        `We won't compile a pointer that will always return '${name}'. Use JsonPointer.rel(target, ptr) instead.`,\n      );\n    }\n    return new JsonPointer(r);\n  }\n\n  /**\n   * Resolves the specified relative pointer path against the specified target object, and gets the target object's value at the relative pointer's location.\n   * @param target the target of the operation\n   * @param ptr the relative pointer (relative to this)\n   * @returns the value at the relative pointer's resolved path; otherwise undefined.\n   */\n  rel(target: unknown, ptr: RelativeJsonPointer): unknown {\n    const p = this.path;\n    const decoded = decodeRelativePointer(ptr) as string[];\n    const n = parseInt(decoded[0]);\n    if (n > p.length) {\n      // out of bounds\n      return undefined;\n    }\n    const r = p.slice(0, p.length - n).concat(decoded.slice(1));\n    const other = new JsonPointer(r);\n    if (decoded[0][decoded[0].length - 1] == '#') {\n      // It references the path segment/name, not the value\n      const name = r[r.length - 1] as string;\n      const parent = other.parent(target);\n      return Array.isArray(parent) ? parseInt(name, 10) : name;\n    }\n    return other.get(target);\n  }\n\n  /**\n   * Creates a new instance by concatenating the specified pointer's path onto this pointer's path.\n   * @param ptr the string representation of a pointer, it's decoded path, or an instance of JsonPointer indicating the additional path to concatenate onto the pointer.\n   */\n  concat(ptr: JsonPointer | Pointer | PathSegments): JsonPointer {\n    return new JsonPointer(\n      this.path.concat(\n        ptr instanceof JsonPointer ? ptr.path : decodePtrInit(ptr),\n      ),\n    );\n  }\n\n  /**\n   * This pointer's JSON Pointer encoded string representation.\n   */\n  get pointer(): JsonStringPointer {\n    if (this[$ptr] === undefined) {\n      this[$ptr] = encodePointer(this.path);\n    }\n    return this[$ptr];\n  }\n\n  /**\n   * This pointer's URI fragment identifier encoded string representation.\n   */\n  get uriFragmentIdentifier(): UriFragmentIdentifierPointer {\n    if (!this[$frg]) {\n      this[$frg] = encodeUriFragmentIdentifier(this.path);\n    }\n    return this[$frg];\n  }\n\n  /**\n   * Emits the JSON Pointer encoded string representation.\n   */\n  toString(): string {\n    return this.pointer;\n  }\n}\n\n/** @hidden */\nconst $pointer = Symbol('pointer');\n\n/**\n * A reference to a location in an object graph.\n *\n * This type is used by this module to break cycles in an object graph and to\n * reference locations that have already been visited when enumerating pointers.\n */\nexport class JsonReference {\n  /**\n   * Determines if the specified `candidate` is a JsonReference.\n   * @param candidate the candidate\n   */\n  static isReference(candidate: unknown): candidate is JsonReference {\n    if (!candidate) return false;\n    const ref = candidate as unknown as JsonReference;\n    return typeof ref.$ref === 'string' && typeof ref.resolve === 'function';\n  }\n\n  /** @hidden */\n  private readonly [$pointer]: JsonPointer;\n\n  /**\n   * A reference to a position if an object graph.\n   */\n  public readonly $ref: UriFragmentIdentifierPointer;\n\n  /**\n   * Creates a new instance.\n   * @param pointer a JSON Pointer for the reference.\n   */\n  constructor(pointer: JsonPointer | Pointer | PathSegments) {\n    this[$pointer] =\n      pointer instanceof JsonPointer ? pointer : new JsonPointer(pointer);\n    this.$ref = this[$pointer].uriFragmentIdentifier;\n  }\n\n  /**\n   * Resolves the reference against the `target` object, returning the value at\n   * the referenced pointer's location.\n   * @param target the target object\n   */\n  resolve(target: unknown): unknown {\n    return this[$pointer].get(target);\n  }\n\n  /**\n   * Gets the reference's pointer.\n   */\n  pointer(): JsonPointer {\n    return this[$pointer];\n  }\n\n  /**\n   * Gets the reference pointer's string representation (a URI fragment identifier).\n   */\n  toString(): string {\n    return this.$ref;\n  }\n}\n", "import type m from 'mithril';\nimport { selectionFactory } from '../factories/selectionFactory.ts';\nimport type { OctironSelectArgs, OctironSelection, SelectView, TypeDefs } from '../types/octiron.ts';\nimport type { EntityState } from '../types/store.ts';\nimport type { Store } from \"../store.ts\";\n\nexport type ActionRendererRef = {\n  submitting: boolean;\n  submitResult?: EntityState;\n  store: Store;\n  typeDefs: TypeDefs;\n};\n\nexport type ActionStateRendererAttrs = {\n  type: 'initial' | 'success' | 'failure';\n  children?: m.Children;\n  selector?: string;\n  args?: OctironSelectArgs;\n  view?: SelectView;\n  refs: ActionRendererRef;\n};\n\nexport const ActionStateRenderer: m.ClosureComponent<ActionStateRendererAttrs> = () => {\n  let submitResult: EntityState | undefined;\n  let o: OctironSelection | undefined;\n\n  function setInstance(attrs: ActionStateRendererAttrs) {\n    if (typeof attrs.refs.submitResult === 'undefined') {\n        submitResult = undefined;\n      o = undefined;\n    } else if (\n      typeof submitResult === 'undefined' ||\n      attrs.refs.submitResult.ok !== submitResult.ok ||\n      attrs.refs.submitResult.status !== submitResult.status ||\n      attrs.refs.submitResult.value !== submitResult.value\n    ) {\n      submitResult = attrs.refs.submitResult;\n\n      o = selectionFactory({\n        value: submitResult.value,\n        store: attrs.refs.store,\n        typeDefs: attrs.refs.typeDefs,\n      });\n    }\n  }\n\n  return {\n    oninit: ({ attrs }) => {\n      setInstance(attrs);\n    },\n    onbeforeupdate: ({ attrs }) => {\n      setInstance(attrs);\n    },\n    view: ({ attrs: { type, selector, args, view }, children }) => {\n      if (type === 'initial' && typeof submitResult === 'undefined') {\n        return children;\n      } else if (\n        typeof submitResult === 'undefined' || typeof o !== 'function'\n      ) {\n        return null;\n      }\n\n      const shouldRender = (type === 'success' && submitResult.ok) ||\n        (type === 'failure' && !submitResult.ok);\n\n      if (shouldRender && selector != null && args != null && view != null) {\n        return o.select(selector, args, view);\n      } else if (shouldRender && typeof view === 'function') {\n        return view(o);\n      } else if (shouldRender && typeof args !== 'undefined') {\n        return o.present(args);\n      }\n\n      return null;\n    },\n  };\n};\n", "import uriTemplates from 'uri-templates';\nimport type { Store } from \"../store.ts\";\nimport type { JSONObject, JSONValue, SCMAction } from '../types/common.ts';\nimport { isJSONObject } from './isJSONObject.ts';\n\n\nexport type SubmitDetails = {\n  url: string;\n  method: string;\n  contentType?: string;\n  encodingType?: string;\n  body?: string;\n};\n\n/**\n * Gets the details on how to perform a submission\n * based off an action, payload and other context.\n *\n * @param args.payload The current payload value.\n * @param args.action The schema.org styled action object.\n * @param args.store The Octiron store.\n */\nexport function getSubmitDetails({\n  payload,\n  action,\n  store,\n}: {\n  payload: JSONObject;\n  action: SCMAction;\n  store: Store;\n}): SubmitDetails {\n  let urlTemplate: string | undefined;\n  let body: string | undefined;\n  let method: string = 'get';\n  let contentType: string | undefined;\n  let encodingType: string | undefined;\n  let target = action['https://schema.org/target'];\n\n  if (Array.isArray(target)) {\n    for (const item of target) {\n      if (item === 'string') {\n        target = item;\n        break;\n      } else if (\n        isJSONObject(target) && (\n          target['https://schema.org/contentType'] == null || (\n            target['https://schema.org/contentType'] === 'mutipart/form-data' ||\n            target['https://schema.org/contentType'] === 'application/ld+json'\n          )\n        )\n      ) {\n        target = item;\n        break;\n      }\n    }\n  }\n\n  if (typeof target === 'string') {\n    urlTemplate = target;\n  } else if (isJSONObject(target)) {\n    if (typeof target['https://schema.org/urlTemplate'] === 'string') {\n      urlTemplate = target['https://schema.org/urlTemplate'];\n    }\n\n    if (typeof target['https://schema.org/httpMethod'] === 'string') {\n      method = target['https://schema.org/httpMethod'].toLowerCase();\n    }\n\n    if (typeof target['https://schema.org/contentType'] === 'string') {\n      contentType = target['https://schema.org/contentType'];\n    }\n\n    if (typeof target['https://schema.org/encodingType'] === 'string') {\n      encodingType = target['https://schema.org/encodingType'];\n    }\n  }\n\n  if (typeof urlTemplate !== 'string') {\n    throw new Error('Action has invalid https://schema.org/target');\n  }\n\n  const template = uriTemplates(urlTemplate);\n\n  // deno-lint-ignore no-explicit-any\n  const url: string = template.fill(payload as any);\n\n  // only add body if supporting HTTP method\n  if (method !== 'get' && method !== 'delete') {\n    const json: Record<string, JSONValue> = {};\n\n    for (const [key, value] of Object.entries(payload)) {\n      json[store.expand(key)] = value;\n    }\n  }\n\n  return {\n    url,\n    method,\n    contentType,\n    encodingType,\n    body,\n  };\n}\n", "import m from 'mithril';\nimport { isBrowserRender } from \"../consts.ts\";\n\n/**\n * @description\n * Calls Mithril's redraw function if the window object exists.\n */\nexport function mithrilRedraw(): void {\n  if (isBrowserRender) {\n    m.redraw();\n  }\n}\n", "\nexport const isBrowserRender = typeof window !== 'undefined';\n", "import { JsonPointer } from 'json-ptr';\nimport m from 'mithril';\nimport { ActionSelectionRenderer } from \"../renderers/ActionSelectionRenderer.ts\";\nimport { SelectionRenderer } from \"../renderers/SelectionRenderer.ts\";\nimport type { Store } from \"../store.ts\";\nimport type { JSONArray, JSONObject, JSONValue, SCMPropertyValueSpecification } from \"../types/common.ts\";\nimport type { ActionSelectView, BaseAttrs, EditComponent, Interceptor, Octiron, OctironAction, OctironActionSelection, OctironActionSelectionArgs, OctironEditArgs, OctironPresentArgs, OctironSelectArgs, OctironSelection, OnChange, PayloadValueMapper, PresentComponent, Selector, SelectView, TypeDefs, UpdateArgs } from \"../types/octiron.ts\";\nimport { getComponent } from \"../utils/getComponent.ts\";\nimport { getValueType } from \"../utils/getValueType.ts\";\nimport { isJSONObject } from \"../utils/isJSONObject.ts\";\nimport { mithrilRedraw } from \"../utils/mithrilRedraw.ts\";\nimport { unravelArgs } from \"../utils/unravelArgs.ts\";\nimport { octironFactory } from \"./octironFactory.ts\";\n\n\nexport type OnActionSelectionSubmit = () => Promise<void>;\n\nexport type OnActionSelectionUpdate = (\n  pointer: string,\n  value: JSONValue,\n  args?: UpdateArgs,\n) => void;\n\nexport type ActionSelectionInternals = {\n  submitting: boolean;\n  type: string | string[];\n  datatype: string;\n  pointer: string;\n  name: string;\n  value: JSONValue;\n  actionValue?: JSONValue;\n  entity: Octiron;\n  action: OctironAction;\n  parent: OctironAction | OctironActionSelection;\n  octiron: OctironSelection;\n  store: Store;\n  spec?: SCMPropertyValueSpecification;\n  typeDefs: TypeDefs;\n  onSubmit: OnActionSelectionSubmit;\n  onUpdate: OnActionSelectionUpdate;\n};\n\nexport type OctironActionSelectionHooks = {\n  _updateArgs(args: OctironActionSelectionArgs): void;\n  _updateInternals(internals: Partial<ActionSelectionInternals>): void;\n}\n\nexport function actionSelectionFactory<\n  // deno-lint-ignore no-explicit-any\n  Attrs extends Record<string, any> = Record<string, any>\n>(\n  internals: ActionSelectionInternals,\n  args: OctironActionSelectionArgs<Attrs>,\n): OctironActionSelection & OctironActionSelectionHooks {\n  const factoryArgs = Object.assign({}, args);\n  const uniqueId = internals.store.key();\n\n  const refs = Object.assign({}, args);\n\n  function onUpdate(value: JSONObject) {\n    return internals.onUpdate(internals.pointer, value, {\n      throttle: refs.throttle,\n      debounce: refs.debounce,\n      submitOnChange: refs.submitOnChange,\n    });\n  }\n\n  const self = octironFactory<OctironActionSelection & OctironActionSelectionHooks>();\n\n  self.octironType = 'action-selection';\n  self.readonly = internals.spec == null ? true : (internals.spec.readonlyValue || false);\n  self.store = internals.store;\n  self.id = uniqueId;\n  self.inputName = internals.datatype;\n  self.submitting = internals.submitting;\n  self.value = internals.value ?? args.initialValue;\n  self.action = internals.action;\n\n  function onSelectionUpdate(\n    pointer: string,\n    value: JSONValue,\n    args?: UpdateArgs,\n    interceptor?: Interceptor,\n  ) {\n    const prev = self.value as JSONObject;\n\n    if (!isJSONObject(prev)) {\n      console.warn(`Non object action change intercepted.`);\n      return;\n    }\n\n    let next: Partial<JSONObject> = Object.assign({}, prev);\n    const ptr = JsonPointer.create(pointer);\n\n    if (value == null) {\n      ptr.unset(next);\n    } else {\n      ptr.set(next, value, true);\n    }\n\n    if (typeof interceptor === 'function') {\n      next = interceptor(next, prev, internals.actionValue as JSONObject);\n    }\n\n    internals.onUpdate(internals.pointer, next, args);\n  }\n\n  self.update = async function(\n    arg1: PayloadValueMapper<JSONObject> | JSONObject,\n    args?: UpdateArgs,\n  ): Promise<void> {\n    const value = self.value;\n\n    if (!isJSONObject(value)) {\n      throw new Error(`Cannot call update on a non object selection instance`);\n    }\n\n    if (typeof arg1 === 'function') {\n      onUpdate(arg1(value));\n    } else if (arg1 != null) {\n      onUpdate(arg1);\n    }\n\n    if (args?.submit || args?.submitOnChange) {\n      await internals.onSubmit();\n    } else {\n      mithrilRedraw();\n    }\n  };\n\n  self.submit = function (): Promise<void> {\n    return internals.onSubmit();\n  };\n\n  self.root = function (\n    arg1?: Selector | OctironSelectArgs | SelectView,\n    arg2?: OctironSelectArgs | SelectView,\n    arg3?: SelectView,\n  ): m.Children {\n    let selector: string;\n    const [childSelector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n    if (childSelector == null) {\n      selector = internals.store.rootIRI;\n    } else {\n      selector = `${internals.store.rootIRI} ${childSelector}`;\n    }\n\n    return m(SelectionRenderer, {\n      selector,\n      args,\n      view,\n      internals: {\n        store: internals.store,\n        typeDefs: args?.typeDefs || factoryArgs?.typeDefs || internals.typeDefs,\n        parent: self as unknown as OctironAction,\n      },\n    });\n  };\n\n  self.select = function (\n    arg1: Selector,\n    arg2?: OctironActionSelectionArgs | ActionSelectView,\n    arg3?: ActionSelectView,\n  ): m.Children {\n    if (!isJSONObject(self.value)) {\n      return null;\n    }\n\n    const [selector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n    const onUpdate: OnActionSelectionUpdate = (\n      pointer,\n      value,\n      updateArgs,\n    ) => {\n      onSelectionUpdate(\n        pointer,\n        value,\n        updateArgs,\n        args.interceptor,\n      );\n    }\n\n    return m(\n      ActionSelectionRenderer,\n      {\n        internals: {\n          submitting: internals.submitting,\n          entity: internals.entity,\n          action: internals.action,\n          parent: self as unknown as OctironActionSelection,\n          store: internals.store,\n          typeDefs: internals.typeDefs,\n          onSubmit: internals.onSubmit,\n          onUpdate,\n        },\n        selector,\n        value: self.value,\n        actionValue: internals.actionValue as JSONObject,\n        args,\n        view,\n      },\n    );\n  };\n\n  self.enter = function(\n    arg1: Selector,\n    arg2?: OctironSelectArgs | SelectView,\n    arg3?: SelectView,\n  ): m.Children {\n    const [selector, args, view] = unravelArgs(arg1, arg2, arg3);\n\n    return m(SelectionRenderer, {\n      selector,\n      args,\n      view,\n      internals: {\n        store: internals.store,\n        typeDefs: args?.typeDefs || factoryArgs?.typeDefs || internals.typeDefs,\n        parent: self as unknown as OctironAction,\n      },\n    });\n  };\n\n  self.present = (\n    args?: OctironPresentArgs<BaseAttrs>,\n  ): m.Children => {\n    let attrs: BaseAttrs = {} as BaseAttrs;\n    let firstPickComponent: PresentComponent<JSONObject, BaseAttrs> | undefined;\n    let fallbackComponent: PresentComponent<JSONObject> | undefined;\n\n    if (args?.attrs != null) {\n      attrs = args.attrs as BaseAttrs;\n    } else if (factoryArgs?.attrs != null) {\n      attrs = factoryArgs.attrs as unknown as BaseAttrs;\n    }\n\n    if (args?.component != null) {\n      firstPickComponent = args.component as PresentComponent<JSONObject, BaseAttrs>;\n    } else if (args?.component !== null && factoryArgs?.component != null) {\n      firstPickComponent = factoryArgs.component as unknown as PresentComponent<\n        JSONObject,\n        BaseAttrs\n      >;\n    }\n\n    if (args?.fallbackComponent != null) {\n      fallbackComponent = args.fallbackComponent as unknown as PresentComponent<JSONObject>;\n    } else if (factoryArgs?.fallbackComponent != null) {\n      fallbackComponent = factoryArgs.fallbackComponent as unknown as PresentComponent<JSONObject>;\n    }\n\n    const component = getComponent({\n      style: \"present\",\n      type: getValueType(internals.value),\n      firstPickComponent: firstPickComponent as unknown as PresentComponent,\n      fallbackComponent: fallbackComponent as unknown as PresentComponent,\n      typeDefs: args?.typeDefs || internals.typeDefs || {},\n    });\n\n    if (component == null) {\n      return null;\n    }\n\n    return m(component as PresentComponent<JSONValue, BaseAttrs>, {\n      o: self as unknown as OctironActionSelection,\n      renderType: \"present\",\n      value: self.value,\n      attrs,\n    });\n  };\n\n  self.edit = function(\n    args?: OctironEditArgs<BaseAttrs>,\n  ): m.Children {\n    if (self.readonly) {\n      return self.present(args as OctironPresentArgs<BaseAttrs>);\n    }\n\n    let attrs: BaseAttrs = {} as BaseAttrs;\n    let firstPickComponent: PresentComponent<JSONObject, BaseAttrs> | undefined;\n    let fallbackComponent: PresentComponent<JSONObject> | undefined;\n\n    if (args?.attrs != null) {\n      attrs = args.attrs as BaseAttrs;\n    } else if (factoryArgs?.attrs != null) {\n      attrs = factoryArgs.attrs as unknown as BaseAttrs;\n    }\n\n    if (args?.component != null) {\n      firstPickComponent = args.component as PresentComponent<JSONObject, BaseAttrs>;\n    } else if (args?.component !== null && factoryArgs?.component != null) {\n      firstPickComponent = factoryArgs.component as unknown as PresentComponent<\n        JSONObject,\n        BaseAttrs\n      >;\n    }\n\n    if (args?.fallbackComponent != null) {\n      fallbackComponent = args.fallbackComponent as unknown as PresentComponent<JSONObject>;\n    } else if (factoryArgs?.fallbackComponent != null) {\n      fallbackComponent = factoryArgs.fallbackComponent as unknown as PresentComponent<JSONObject>;\n    }\n\n    const component = getComponent({\n      style: \"edit\",\n      datatype: internals.datatype,\n      type: getValueType(self.value),\n      firstPickComponent,\n      fallbackComponent,\n      typeDefs: args?.typeDefs || internals.typeDefs || {},\n    });\n\n    if (component == null) {\n      return null;\n    }\n\n    // don't apply intercepter fn to edit calls.\n    // deno-lint-ignore no-explicit-any\n    const onChange: OnChange<any> = (value, args) => {\n      return internals.onUpdate(internals.pointer, value, args);\n    }\n\n    return m(component as EditComponent<JSONValue, BaseAttrs>, {\n      o: self as unknown as OctironActionSelection,\n      required: true,\n      readonly: false,\n      renderType: \"edit\",\n      name: self.inputName,\n      value: self.value,\n      attrs,\n      onchange: onChange,\n      onChange,\n    });\n  };\n\n  self.default = function (\n    args?: OctironPresentArgs | OctironEditArgs,\n  ): m.Children {\n    return self.edit(Object.assign({ component: null }, args));\n  };\n\n  self.initial = function (children: m.Children) {\n    return internals.action.initial(children);\n  };\n\n  self.success = function (\n    arg1?: Selector | OctironSelectArgs | SelectView,\n    arg2?: OctironSelectArgs | SelectView,\n    arg3?: SelectView,\n  ) {\n    return internals.action.success(\n      arg1 as Selector,\n      arg2 as OctironSelectArgs,\n      arg3 as SelectView,\n    );\n  };\n\n  self.failure = function (\n    arg1?: Selector | OctironSelectArgs | SelectView,\n    arg2?: OctironSelectArgs | SelectView,\n    arg3?: SelectView,\n  ) {\n    return internals.action.failure(\n      arg1 as Selector,\n      arg2 as OctironSelectArgs,\n      arg3 as SelectView,\n    );\n  };\n\n  self.remove = function (\n    args: UpdateArgs = {},\n  ) {\n    internals.onUpdate(\n      internals.pointer,\n      null as unknown as JSONObject,\n      args,\n    );\n  };\n\n  self.append = function (\n    termOrType: string,\n    value: JSONValue = {},\n    args: UpdateArgs = {},\n  ) {\n    const type = internals.store.expand(termOrType);\n\n    if (isJSONObject(self.value)) {\n      const prevValue = self.value[type];\n      let nextValue: JSONArray = [];\n\n      if (prevValue != null && !Array.isArray(prevValue)) {\n        nextValue.push(prevValue);\n      } else if (Array.isArray(prevValue)) {\n        nextValue = [...prevValue];\n      }\n\n      nextValue.push(value);\n\n      return internals.onUpdate(internals.pointer, {\n        ...self.value,\n        [type]: nextValue,\n      }, args);\n    }\n  };\n\n  self._updateInternals = function (incomming: Partial<ActionSelectionInternals>) {\n    for (const [key, value] of Object.entries(incomming)) {\n      // deno-lint-ignore no-explicit-any\n      (internals as Record<string, any>)[key] = value;\n    }\n  };\n\n  self._updateArgs = function (args: OctironActionSelectionArgs) {\n    for (const [key, value] of Object.entries(args)) {\n      // deno-lint-ignore no-explicit-any\n      (factoryArgs as Record<string, any>)[key] = value;\n    }\n  };\n\n  return self as unknown as OctironActionSelection & OctironActionSelectionHooks;\n}\n", "import type { Children } from \"mithril\";\nimport type { Octiron } from \"@octiron/octiron\";\nimport type { Mutable } from \"../types/common.ts\";\nimport type { OctironSelectArgs, Predicate, Selector, SelectView } from \"../types/octiron.ts\";\nimport { unravelArgs } from \"../utils/unravelArgs.ts\";\n\n\nexport function octironFactory<O extends Octiron>() {\n  const self: Mutable<O> = function(\n    predicate: Predicate,\n    children: Children,\n  ): Children {\n    const passes = predicate(self as O);\n\n    if (passes) {\n      return children;\n    }\n\n    return null;\n  } as O;\n\n  self.isOctiron = true;\n\n  self.not = function(\n    predicate: Predicate,\n    children: Children,\n  ): Children {\n    if (self == null) {\n      return null;\n    }\n\n    const passes = predicate(self as O);\n\n    if (!passes) {\n      return children;\n    }\n\n    return null;\n  };\n\n  return self;\n}\n", "\n/**\n * @description\n * Espects a list of json pointer parts and returns a json pointer.\n */\nexport function escapeJSONPointerParts(...parts: string[]): string {\n  const escaped = parts\n    .map((part) => part.replace(/~/g, '~0').replace(/\\//g, '~1'))\n    .join('/');\n\n  return `${escaped}`;\n}\n", "import type { IterableJSONLD, JSONArray } from '../types/common.ts';\n\n\n/**\n * @description\n * Returns true if a json-ld value is an array or has an iterable value,\n * i.e.: an object with an `@list` or `@set` array value.\n *\n * This function returns an empty array in the cases where a non-iterable value\n * is given.\n *\n * @param {JSONValue} value - A json-ld value\n */\nexport function getIterableValue(value: IterableJSONLD): JSONArray {\n  if (Array.isArray(value)) {\n    return value;\n  } else if (Array.isArray(value['@list'])) {\n    return value['@list'];\n  } else if (Array.isArray(value['@set'])) {\n    return value['@set'];\n  }\n\n  return [];\n}\n", "import type { IRIObject, JSONObject, JSONValue } from \"../types/common.ts\";\nimport { isJSONObject } from \"./isJSONObject.ts\";\n\n\n/**\n * @description\n * Returns true if the given value is a JSON object with a JSON-ld @id value.\n *\n * @param value Any value which should come from a JSON source.\n */\nexport function isIRIObject<\n  Properties extends JSONObject = JSONObject\n>(value: JSONValue): value is IRIObject<Properties> {\n  return isJSONObject(value)\n    && typeof value['@id'] === 'string'\n    && value['@id'] !== '';\n}\n", "import type { IterableJSONLD, JSONValue } from '../types/common.ts';\nimport { isJSONObject } from \"./isJSONObject.ts\";\n\n/**\n * @description\n * Returns true if a json-ld value is an array or has an iterable value,\n * i.e.: an object with an `@list` or `@set` array value.\n *\n * @param {JSONValue} value - A json-ld value\n */\nexport function isIterable(value: JSONValue): value is IterableJSONLD {\n  if (Array.isArray(value)) {\n    return true;\n  } else if (isJSONObject(value)) {\n    if (Array.isArray(value[\"@list\"])) {\n      return true;\n    } else if (Array.isArray(value[\"@set\"])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n", "import type { IRIObject, JSONObject } from '../types/common.ts';\n\n/**\n * @description\n * Some JSON-ld objects contain special JSON-ld values, such as @type which\n * can inform the software on what to expect when retrieving the object but\n * otherwise require fetching an entity from an endpoint to get the values\n * they relate to. For Octiron's purposes these are considered metadata objects.\n *\n * Objects containing `@value`, `@list`, `@set` are not considered metadata\n * objects as these properties references concrete values.\n *\n * @param value - The JSON object to check for non special properties in.\n */\nexport function isMetadataObject(value: JSONObject): value is IRIObject {\n  const keys = Object.keys(value);\n\n  if (keys.length === 0) {\n    return false;\n  }\n\n  for (const term of keys) {\n    if (!term.startsWith(\"@\") ||\n      term === '@value' ||\n      term === '@list' ||\n      term === '@set') {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "import type { JSONObject, ValueObject } from '../types/common.ts';\n\n/**\n * @description\n * A value object contains a `@value` value. Often this is used to provide\n * further information about the value like what `@type` it holds, allowing\n * filters to be applied to the referenced value.\n *\n * @param value - A JSON value.\n */\nexport function isValueObject(\n  value: JSONObject,\n): value is ValueObject {\n  return typeof value['@value'] !== 'undefined';\n}\n", "import type { Store } from \"../store.ts\";\n\nexport type SelectorObject = {\n  subject: string;\n  filter?: string;\n};\n\nconst selectorRe = /\\s*(?<subject>([^\\[\\s]+))(\\[(?<filter>([^\\]])+)\\])?\\s*/g;\n\n/**\n * @description\n * Parses a selector string producing a selector list\n * The subject value of a selector could be an iri or a type depending on the\n * outer context.\n *\n * @param selector - The selector string to parse.\n */\nexport function parseSelectorString(selector: string, store: Store): SelectorObject[] {\n  let match: RegExpExecArray | null;\n  const selectors: SelectorObject[] = [];\n\n  while ((match = selectorRe.exec(selector))) {\n    const subject = match.groups?.subject;\n    const filter = match.groups?.filter;\n\n    if (typeof filter === 'string' && typeof subject === 'string') {\n      selectors.push({\n        subject: store.expand(subject),\n        filter,\n      });\n    } else if (typeof subject === 'string') {\n      selectors.push({\n        subject: store.expand(subject),\n      });\n    } else {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n  }\n\n  return selectors;\n}\n", "\nimport type { Store } from \"../store.ts\";\nimport type { JSONObject, SCMPropertyValueSpecification } from '../types/common.ts';\n\nconst httpRe = /^https?\\:\\/\\//;\nconst scmCtxRe = /^https?\\:\\/\\/schema\\.org/;\nconst scmTypeRe = /^https?\\:\\/\\/schema\\.org\\/(?<term>(readonlyValue|valueName|valueRequired|defaultValue|minValue|maxValue|stepValue|valuePattern|multipleValues|valueMinLength|valueMaxLength))/;\n\nexport function resolvePropertyValueSpecification({\n  spec,\n  store,\n}: {\n  spec: JSONObject;\n  store: Store;\n}) {\n  const pvs: SCMPropertyValueSpecification = {\n    readonlyValue: false,\n    valueRequired: false,\n  };\n\n  let scmAlias: [string, string] | undefined;\n  const scmVocab = store.vocab == null ? false : scmCtxRe.test(store.vocab);\n\n  for (const [key, value] of Object.entries(store.aliases)) {\n    if (scmCtxRe.test(value)) {\n      scmAlias = [key, value];\n\n      break;\n    }\n  }\n\n  for (const [term, value] of Object.entries(spec)) {\n    let type;\n\n    if (!httpRe.test(term)) {\n      if (scmVocab && !term.includes(':')) {\n        type = `${store.vocab}${term}`;\n      } else if (scmAlias && term.startsWith(`${scmAlias[0]}:`)) {\n        type = term.replace(`${scmAlias[0]}:`, scmAlias[1]);\n      }\n    } else {\n      type = term;\n    }\n\n    if (!type) {\n      continue;\n    }\n\n    const result = scmTypeRe.exec(type);\n\n    if (result?.groups?.term) {\n      (pvs as JSONObject)[result.groups.term] = value;\n    }\n  }\n\n  return pvs;\n}\n", "import type { JSONArray, JSONObject, JSONValue, Mutable, SCMPropertyValueSpecification } from '../types/common.ts';\nimport type { ActionSelectionResult, EntitySelectionResult, SelectionDetails, SelectionResult, ValueSelectionResult } from '../types/store.ts';\nimport { escapeJSONPointerParts } from './escapeJSONPointerParts.ts';\nimport { getIterableValue } from \"./getIterableValue.ts\";\nimport { isIRIObject } from \"./isIRIObject.ts\";\nimport { isIterable } from \"./isIterable.ts\";\nimport { isJSONObject } from './isJSONObject.ts';\nimport { isMetadataObject } from \"./isMetadataObject.ts\";\nimport { isValueObject } from \"./isValueObject.ts\";\nimport { parseSelectorString } from './parseSelectorString.ts';\nimport type { Store } from '../store.ts';\nimport { resolvePropertyValueSpecification } from \"./resolvePropertyValueSpecification.ts\";\n\n/**\n * A circular selection error occurs when two or more\n * entities contain no concrete values and their '@id'\n * values point to each other in a way that creates a\n * loop. The `getSelection` function will throw when\n * this scenario is detected to prevent an infinite\n * loop.\n */\nexport class CircularSelectionError extends Error {}\n\nexport type SelectorObject = {\n  subject: string;\n  filter?: string;\n};\n\ntype SourceSelectionResults =\n  | EntitySelectionResult\n  | ValueSelectionResult\n;\n\ntype ProcessingEntitySelectionResult = {\n  // used to build the final key value.\n  keySource: string;\n} & Omit<EntitySelectionResult, 'key'>;\n\ntype ProcessingValueSelectionResult = {\n  // used to build the final key value.\n  keySource: string;\n} & Omit<ValueSelectionResult, 'key'>;\n\ntype ProcessingActionSelectionResult = {\n  // used to build the final key value.\n  keySource: string;\n} & Omit<ActionSelectionResult, 'key'>;\n\ntype ProcessingSelectionDetails = SelectionDetails<\n  | ProcessingEntitySelectionResult\n  | ProcessingValueSelectionResult\n  | ProcessingActionSelectionResult\n>;\n\n\nexport function transformProcessedDetails<T extends SelectionResult>(\n  processing: ProcessingSelectionDetails,\n): SelectionDetails<T> {\n  for (let index = 0; index < processing.result.length; index++) {\n    const element = processing.result[index];\n\n    (element as unknown as Mutable<SourceSelectionResults>).key = Symbol.for(element.keySource);\n\n    // deno-lint-ignore no-explicit-any\n    delete (element as any).keySource;\n  }\n\n  return processing as unknown as SelectionDetails<T>;\n}\n\n/**\n * @description\n * Selects from the given context value and store state.\n *\n * If no `value` is provided the `selector` is assumed to begin with an iri\n * instead of a type. An entity will be selected from the store using the iri,\n * if it exists, to begin the selection.\n *\n * A type selector selects values from the context of a provided value\n * and will pull from the store if any iri objects are selected in the process.\n *\n * @param {string} args.selector          Selector string begining with a type.\n * @param {JSONObject} [args.value]       Context object to begin the selection from.\n * @param {JSONObject} [args.actionValue] The action, or point in the action definition which describes this value.\n * @param {Store} args.store       Octiron store to search using.\n * @returns {SelectionDetails}            Selection contained in a details object.\n */\nexport function getSelection<T extends SelectionResult>({\n  selector: selectorStr,\n  value,\n  actionValue,\n  store,\n}: {\n  selector: string;\n  value?: JSONObject;\n  actionValue?: JSONObject;\n  store: Store;\n}): SelectionDetails<T> {\n  const details: ProcessingSelectionDetails = {\n    selector: selectorStr,\n    complete: false,\n    hasErrors: false,\n    hasMissing: false,\n    required: [],\n    dependencies: [],\n    result: [],\n  };\n\n  if (value == null) {\n    const [{ subject: iri, filter }, ...selector] =\n      parseSelectorString(selectorStr, store);\n\n    selectEntity({\n      keySource: '',\n      pointer: '',\n      iri,\n      filter,\n      selector: selector.length > 0 ? selector : undefined,\n      store,\n      details,\n    });\n\n    details.complete = details.required.length === 0;\n\n    return transformProcessedDetails<T>(details);\n  }\n\n  const selector = parseSelectorString(selectorStr, store);\n\n  traverseSelector({\n    keySource: '',\n    pointer: '',\n    value,\n    actionValue,\n    selector,\n    store,\n    details,\n  });\n\n  details.complete = details.required.length === 0;\n\n  for (let index = 0; index < details.result.length; index++) {\n    const element = details.result[index];\n\n    (element as unknown as Mutable<SourceSelectionResults>).key = Symbol.for(element.keySource);\n  }\n\n  return transformProcessedDetails<T>(details);\n}\n\nfunction makePointer(pointer: string, addition: string | number) {\n  return `${pointer}/${escapeJSONPointerParts(addition.toString())}`;\n}\n\n/**\n * Filters apply to objects with `@type` properties. These can be strings or\n * arrays of strings and are considered a pass if any of the values match the\n * filter.\n *\n * If an object is provided which does not contain an `@type` property it is\n * considered a fail.\n */\nfunction passesFilter({\n  value,\n  filter,\n}: {\n  value: JSONObject;\n  filter?: string;\n}): boolean {\n  if (typeof filter !== 'string') {\n    return true;\n  }\n\n  if (Array.isArray(value['@type'])) {\n    return value['@type'].includes(filter);\n  }\n\n  return value['@type'] === filter;\n}\n\n/**\n * If a scala value is pulled before a selection is complete the branch\n * can exit early.\n */\nfunction isTraversable(value: JSONValue): value is JSONObject | JSONArray {\n  return (\n    value !== null &&\n    typeof value !== 'undefined' &&\n    typeof value !== 'boolean' &&\n    typeof value !== 'number' &&\n    typeof value !== 'string'\n  );\n}\n\n\n/**\n * Handles the final value found in a selection.\n * If a @id, @value jsonld object is provided further\n * recursion might be nessacary.\n */\nfunction resolveValue({\n  keySource,\n  pointer,\n  value,\n  datatype,\n  filter,\n  spec,\n  actionValue,\n  store,\n  details,\n}: {\n  keySource: string;\n  pointer: string;\n  value: JSONValue;\n  spec?: JSONObject;\n  actionValue?: JSONValue;\n  datatype: string;\n  filter?: string;\n  store: Store;\n  details: ProcessingSelectionDetails;\n}) {\n  if (value === undefined) {\n    details.hasMissing = true;\n\n    return;\n  }\n\n  if (\n    spec != null && (\n      // hit the for loop below if the action value\n      // has editable properties and the value is an\n      // array\n      !isIterable(value) || !isJSONObject(actionValue)\n    )\n  ) {\n    const pvs = resolvePropertyValueSpecification({\n      spec,\n      store,\n    });\n\n    if (isJSONObject(value) && isValueObject(value)) {\n      value = value['@value'];\n    }\n\n    details.result.push({\n      keySource: pointer,\n      pointer,\n      type: 'action-value',\n      datatype,\n      value,\n      actionValue,\n      spec: pvs,\n      readonly: pvs.readonlyValue,\n    });\n\n    return;\n  }\n\n  if (!isTraversable(value)) {\n    details.result.push({\n      keySource: pointer,\n      pointer: pointer,\n      type: 'value',\n      datatype,\n      value,\n    });\n\n    return;\n  } else if (isIterable(value)) {\n    const list = getIterableValue(value);\n\n    for (let index = 0; index < list.length; index++) {\n      const item = list[index];\n\n      if (!isIRIObject(item)) {\n        keySource = makePointer(keySource, index);\n      }\n\n      resolveValue({\n        keySource,\n        pointer: makePointer(pointer, index),\n        value: item,\n        spec,\n        actionValue,\n        datatype,\n        filter,\n        store,\n        details,\n      });\n\n      if (details.hasErrors || details.hasMissing) {\n        return;\n      }\n    }\n\n    return;\n  }\n  if (typeof filter === 'string' && !passesFilter({ value, filter })) {\n    return;\n  }\n\n  if (isValueObject(value)) {\n    resolveValue({\n      keySource,\n      pointer,\n      value: value['@value'],\n      datatype,\n      store,\n      details,\n    });\n\n    return;\n  } else if (isMetadataObject(value)) {\n    selectEntity({\n      keySource,\n      pointer,\n      iri: value['@id'],\n      filter,\n      store,\n      details,\n    });\n\n    return;\n  }\n\n  if (isIRIObject(value)) {\n    const iri = value['@id'];\n\n    details.result.push({\n      keySource,\n      pointer,\n      type: 'entity',\n      iri,\n      ok: true,\n      value,\n    });\n\n    return;\n  }\n\n  details.result.push({\n    keySource,\n    pointer,\n    type: 'value',\n    datatype,\n    value,\n  });\n}\n\n/**\n * Selects a type from a json value, handling invalid situations.\n */\nfunction selectTypedValue({\n  keySource,\n  pointer,\n  type,\n  value,\n  actionValue,\n  filter,\n  store,\n  details,\n}: {\n  keySource: string;\n  pointer: string;\n  type: string;\n  value: JSONValue;\n  actionValue?: JSONObject;\n  filter?: string;\n  store: Store;\n  details: ProcessingSelectionDetails;\n}): void {\n  pointer = makePointer(pointer, type);\n\n  if (!isTraversable(value)) {\n    return;\n  }\n\n  if (isIterable(value)) {\n    const list = getIterableValue(value);\n\n    for (let index = 0; index < list.length; index++) {\n      const item = list[index];\n\n      if (!isIRIObject(item)) {\n        keySource = makePointer(keySource, index);\n      }\n\n      selectTypedValue({\n        keySource,\n        pointer: makePointer(pointer, index),\n        type,\n        value: item,\n        actionValue,\n        filter,\n        store,\n        details,\n      });\n\n      if (details.hasErrors || details.hasMissing) {\n        return;\n      }\n    }\n\n    return;\n  }\n\n  if (isMetadataObject(value) && isIRIObject(value)) {\n    selectEntity({\n      keySource,\n      pointer,\n      iri: value['@id'],\n      selector: [{ subject: type, filter }],\n      store,\n      details,\n    });\n\n    return;\n  } else if (isMetadataObject(value)) {\n    return;\n  }\n\n  let spec: JSONObject | undefined;\n\n  if (isJSONObject(actionValue) && actionValue[`${type}-input`] == null) {\n    // selecting for an action but the type is not editable\n    return;\n  } else if (isJSONObject(actionValue)) {\n    spec = actionValue[`${type}-input`] as JSONObject;\n  }\n\n  resolveValue({\n    keySource,\n    pointer,\n    value: value[type],\n    spec,\n    actionValue: actionValue?.[type],\n    datatype: type,\n    filter,\n    store,\n    details,\n  });\n}\n\n/**\n * Recurses through the selection until there are no further selection items.\n */\nfunction traverseSelector({\n  keySource,\n  pointer,\n  selector,\n  value,\n  actionValue,\n  store,\n  details,\n}: {\n  keySource: string;\n  pointer: string;\n  selector: SelectorObject[];\n  value: JSONValue;\n  actionValue?: JSONObject;\n  store: Store;\n  details: ProcessingSelectionDetails;\n}): void {\n  if (selector.length === 0) {\n    return;\n  } else if (!isTraversable(value)) {\n    return;\n  }\n\n  if (isIterable(value)) {\n    const list = getIterableValue(value);\n\n    for (let index = 0; index < list.length; index++) {\n      const item = list[index];\n\n      if (!isIRIObject(item)) {\n        keySource = makePointer(keySource, index);\n      }\n\n      // keep nesting on the full selector\n      // as only objects can be subscripted\n      // with terms\n      traverseSelector({\n        keySource,\n        pointer: makePointer(pointer, index),\n        selector,\n        value: item,\n        actionValue,\n        store,\n        details,\n      });\n\n      if (details.hasErrors || details.hasMissing) {\n        return;\n      }\n    }\n\n    return;\n  } else if (isValueObject(value)) {\n    traverseSelector({\n      keySource,\n      pointer,\n      selector,\n      value: value['@value'],\n      actionValue,\n      store,\n      details,\n    });\n  }\n\n  if (isMetadataObject(value) && isIRIObject(value)) {\n    selectEntity({\n      keySource,\n      pointer,\n      selector,\n      iri: value['@id'],\n      store,\n      details,\n    });\n\n    return;\n  }\n\n  // edit selections are a special case in that an input\n  // should render even when no value is present.\n  if (\n    isJSONObject(value) &&\n    actionValue !== undefined &&\n    value[selector[0].subject] == null\n  ) {\n    value = { [selector[0].subject]: null };\n  }\n\n  const [next, ...rest] = selector;\n  const { subject: type, filter } = next;\n\n  // null is a placeholder for action payload types with no value.\n  // jsonld drops null values otherwise.\n  if (value[type] === undefined) {\n    details.hasMissing = true;\n\n    return;\n  }\n\n  if (rest.length === 0 && isJSONObject(actionValue?.[type])) {\n    pointer = makePointer(pointer, type);\n\n    resolveValue({\n      keySource: pointer,\n      pointer,\n      value: value[type],\n      datatype: type,\n      details,\n      store,\n      actionValue: actionValue?.[type],\n      spec: actionValue[`${type}-input`] as SCMPropertyValueSpecification,\n      filter,\n    });\n\n    return;\n  } else if (rest.length === 0) {\n    selectTypedValue({\n      keySource,\n      pointer,\n      type,\n      filter,\n      value,\n      actionValue,\n      store,\n      details,\n    });\n\n    return;\n  }\n\n  if (typeof filter === 'string' && !passesFilter({ value, filter })) {\n    return;\n  }\n\n  let traversedActionValue: JSONObject | undefined;\n\n  if (isJSONObject(actionValue?.[type])) {\n    traversedActionValue = actionValue[type];\n  }\n\n  traverseSelector({\n    keySource: makePointer(keySource, type),\n    pointer: makePointer(pointer, type),\n    selector: rest,\n    value: value[type],\n    actionValue: traversedActionValue,\n    store,\n    details,\n  });\n}\n\n/**\n * Selects an entity from the store and continues the selection\n * if the branch has not completed.\n */\nfunction selectEntity({\n  keySource,\n  pointer,\n  iri,\n  filter,\n  selector,\n  store,\n  details,\n  handledIRIs,\n}: {\n  keySource: string;\n  pointer: string;\n  iri: string;\n  filter?: string;\n  selector?: SelectorObject[];\n  store: Store;\n  details: ProcessingSelectionDetails;\n  handledIRIs?: Set<string>;\n}): void {\n  keySource = makePointer(keySource, iri);\n  pointer = makePointer(pointer, iri);\n\n  const cache = store.entity(iri)\n\n  details.dependencies.push(iri);\n\n  // if loading is required mark found as false\n  if (cache == null || cache.loading) {\n    if (!details.required.includes(iri)) {\n      details.required.push(iri);\n    }\n\n    return;\n  }\n\n  if (!cache.ok) {\n    details.hasErrors = true;\n\n    if (selector == null || selector.length === 0) {\n      return;\n    }\n\n    details.result.push({\n      keySource,\n      pointer,\n      type: 'entity',\n      iri: cache.iri,\n      ok: false,\n      status: cache.status,\n      value: cache.value,\n      reason: cache.reason,\n    });\n\n    return;\n  }\n\n  const value = cache.value;\n\n  if (isMetadataObject(value)) {\n    // in theory serveral entities could be metadata objects\n    // referencing each other and end up looping around...\n    if (handledIRIs == null) {\n      handledIRIs = new Set([value['@id']]);\n    } else if (!handledIRIs.has(value['@id'])) {\n      handledIRIs.add(value['@id']);\n    } else {\n      throw new CircularSelectionError(`Circular selection loop detected`);\n    }\n\n    // select the entity this entity is referencing\n    return selectEntity({\n      keySource,\n      pointer,\n      iri: value['@id'],\n      filter,\n      selector,\n      details,\n      store,\n      handledIRIs,\n    });\n  }\n\n  // if the entity does not match the filter it is not relevant to the final selection\n  if (typeof filter === 'string' && !passesFilter({ filter, value })) {\n    return;\n  }\n\n  if (typeof selector === 'undefined') {\n    details.result.push({\n      keySource,\n      pointer,\n      type: 'entity',\n      iri: cache.iri,\n      ok: true,\n      value: cache.value as JSONObject,\n    });\n\n    return;\n  }\n\n  traverseSelector({\n    keySource,\n    pointer,\n    value,\n    selector,\n    store,\n    details,\n  });\n\n  return;\n}\n", "import type m from \"mithril\";\nimport { actionSelectionFactory, type OctironActionSelectionHooks, type ActionSelectionInternals } from '../factories/actionSelectionFactory.ts';\nimport type { ActionSelectView, OctironActionSelection, OctironActionSelectionArgs, OctironSelection, Selector } from '../types/octiron.ts';\nimport type { ActionSelectionResult, SelectionDetails } from '../types/store.ts';\nimport { getSelection } from '../utils/getSelection.ts';\nimport { isJSONObject } from '../utils/isJSONObject.ts';\nimport { mithrilRedraw } from '../utils/mithrilRedraw.ts';\nimport type { JSONObject } from '../types/common.ts';\nimport { selectionFactory } from '../factories/selectionFactory.ts';\n\n\nexport type ActionSelectionRendererAttrs = {\n  value: JSONObject;\n  actionValue: JSONObject;\n  selector: Selector;\n  internals: Omit<\n    ActionSelectionInternals,\n    | 'name'\n    | 'type'\n    | 'datatype'\n    | 'pointer'\n    | 'spec'\n    | 'value'\n    | 'actionValue'\n    | 'octiron'\n  >;\n  args: OctironActionSelectionArgs;\n  view: ActionSelectView;\n};\n\nexport const ActionSelectionRenderer: m.FactoryComponent<ActionSelectionRendererAttrs> = (\n  vnode,\n) => {\n  let currentAttrs = vnode.attrs;\n  let details: SelectionDetails<ActionSelectionResult>;\n\n  const instances: Record<string, {\n    internals: ActionSelectionInternals;\n    selection: OctironSelection;\n    octiron: OctironActionSelection & OctironActionSelectionHooks;\n    selectionResult: ActionSelectionResult;\n  }> = {};\n\n  function createInstances() {\n    let hasChanges = false;\n\n    const nextKeys: Array<string> = [];\n\n    for (const selectionResult of details.result) {\n      nextKeys.push(selectionResult.pointer);\n\n      if (instances[selectionResult.pointer] != null) {\n        const next = selectionResult;\n        const prev = instances[selectionResult.pointer].selectionResult;\n\n        if (\n          next.value === prev.value\n        ) {\n          continue;\n        }\n\n        const internals = Object.assign({}, instances[selectionResult.pointer].internals);\n\n        internals.name = selectionResult.datatype;\n        internals.type = selectionResult.type;\n        internals.datatype = selectionResult.datatype;\n        internals.pointer = selectionResult.pointer;\n        internals.value = selectionResult.value;\n        internals.actionValue = selectionResult.actionValue;\n\n        if (selectionResult.spec != null) {\n          internals.spec = selectionResult.spec;\n        }\n\n        instances[selectionResult.pointer].octiron._updateInternals(internals);\n      }\n\n      hasChanges = true;\n\n      const selection = selectionFactory({\n        store: currentAttrs.internals.store,\n        typeDefs: currentAttrs.internals.typeDefs,\n        datatype: selectionResult.datatype,\n        value: selectionResult.value,\n      });\n\n      const internals: ActionSelectionInternals = {\n        ...currentAttrs.internals,\n        octiron: selection,\n        name: selectionResult.datatype,\n        type: selectionResult.type,\n        datatype: selectionResult.datatype,\n        pointer: selectionResult.pointer,\n        spec: selectionResult.spec,\n        value: selectionResult.value,\n        actionValue: selectionResult.actionValue,\n      };\n\n      const actionSelection = actionSelectionFactory(\n        internals,\n        currentAttrs.args,\n      );\n\n      instances[selectionResult.pointer] = {\n        internals,\n        selection,\n        octiron: actionSelection,\n        selectionResult,\n      };\n    }\n\n    const prevKeys = Object.keys(instances);\n\n    for (const key of prevKeys) {\n      if (!nextKeys.includes(key)) {\n        hasChanges = true;\n\n        delete instances[key];\n      }\n    }\n\n    if (hasChanges && typeof window !== 'undefined') {\n      mithrilRedraw();\n    }\n  }\n\n  function updateSelection() {\n    const { selector, value, actionValue } = currentAttrs;\n    const { store } = currentAttrs.internals;\n\n    if (!isJSONObject(value)) {\n      return;\n    }\n\n    details = getSelection<ActionSelectionResult>({\n      selector,\n      store,\n      actionValue,\n      value,\n    });\n\n    createInstances();\n  }\n\n  return {\n    oninit: ({ attrs }) => {\n      currentAttrs = attrs;\n\n      updateSelection();\n    },\n    onbeforeupdate: ({ attrs }) => {\n      currentAttrs = attrs;\n\n      for (const instance of Object.values(instances)) {\n        instance.octiron._updateArgs(attrs.args);\n        instance.octiron._updateInternals(attrs.internals);\n      }\n\n      updateSelection();\n    },\n    view: ({ attrs: { view, args } }) => {\n      if (details == null) {\n        return null;\n      }\n\n      const {\n        pre,\n        sep,\n        post,\n        fallback,\n      } = args;\n\n      if (typeof view === 'undefined') {\n        return;\n      }\n\n      const list = Object.values(instances);\n      const children = [pre];\n\n      for (let index = 0; index < list.length; index++) {\n        const { octiron, selectionResult } = list[index];\n\n        if (index !== 0) {\n          children.push(sep);\n        }\n\n        if (selectionResult.value == null && typeof fallback === 'function') {\n          children.push(null)\n          // children.push(fallback(octiron));\n        } else if (selectionResult.value == null && fallback != null) {\n          children.push(fallback as m.Children);\n        } else {\n          children.push(view(octiron));\n        }\n      }\n\n      children.push(post);\n\n      return children;\n    },\n  };\n};\n", "import type m from 'mithril';\nimport { actionFactory, type OctironActionHooks, type ActionInternals } from '../factories/actionFactory.ts';\nimport { selectionFactory } from '../factories/selectionFactory.ts';\nimport type { JSONObject, SCMAction } from '../types/common.ts';\nimport type { OctironAction, OctironPerformArgs, OctironSelection, PerformView, Selector } from '../types/octiron.ts';\nimport type { Failure, ReadonlySelectionResult, SelectionDetails } from '../types/store.ts';\nimport { isIRIObject } from '../utils/isIRIObject.ts';\nimport { mithrilRedraw } from '../utils/mithrilRedraw.ts';\n\nexport type PerformRendererAttrs = {\n  internals: ActionInternals;\n  selector?: Selector;\n  args: OctironPerformArgs;\n  view: PerformView;\n};\n\nexport const PerformRenderer: m.FactoryComponent<PerformRendererAttrs> = ({ attrs }) => {\n  const key = Symbol();\n  let currentAttrs = attrs;\n  let details: SelectionDetails<ReadonlySelectionResult>;\n\n  const instances: Record<string, {\n    octiron: OctironSelection;\n    action: OctironAction & OctironActionHooks;\n    selectionResult: ReadonlySelectionResult;\n  }> = {};\n\n  function createInstances() {\n    let hasChanges = false;\n\n    const nextKeys: Array<string> = [];\n\n    for (const selectionResult of details.result) {\n      nextKeys.push(selectionResult.pointer);\n\n      if (Object.hasOwn(instances, selectionResult.pointer)) {\n        const next = selectionResult;\n        const prev = instances[selectionResult.pointer].selectionResult;\n\n        if (\n          prev.type === 'value' &&\n          next.type === 'value' &&\n          next.value === prev.value\n        ) {\n          continue;\n        } else if (\n          prev.type === 'entity' &&\n          next.type === 'entity' &&\n          (\n            next.ok !== prev.ok ||\n            next.status !== prev.status ||\n            next.value !== prev.value\n          )\n        ) {\n          continue;\n        }\n      }\n\n      hasChanges = true;\n\n      const octiron = selectionFactory({\n        store: currentAttrs.internals.store,\n        typeDefs: currentAttrs.internals.typeDefs,\n        value: selectionResult.value as SCMAction,\n      });\n      const action = actionFactory(currentAttrs.internals, currentAttrs.args);\n\n      instances[selectionResult.pointer] = {\n        action,\n        octiron,\n        selectionResult,\n      };\n    }\n\n    const prevKeys = Object.keys(instances);\n\n    for (const key of prevKeys) {\n      if (!nextKeys.includes(key)) {\n        hasChanges = true;\n\n        delete instances[key];\n      }\n    }\n\n    if (hasChanges) {\n      mithrilRedraw();\n    }\n  }\n\n  async function fetchRequired(required: string[]) {\n    if (required.length === 0) {\n      return;\n    }\n\n    // deno-lint-ignore no-explicit-any\n    const promises: Promise<any>[] = [];\n\n    for (const iri of required) {\n      promises.push(currentAttrs.internals.store.fetch(iri));\n    }\n\n    await Promise.allSettled(promises);\n  }\n\n  function listener(next: SelectionDetails<ReadonlySelectionResult>) {\n    let required: string[] = [];\n\n    if (typeof details === 'undefined') {\n      required = next.required;\n    } else {\n      for (const iri of next.required) {\n        if (!details.required.includes(iri)) {\n          required.push(iri);\n        }\n      }\n    }\n\n    details = next;\n\n    if (required.length > 0) {\n      fetchRequired(required);\n    }\n\n    createInstances();\n  }\n\n  function subscribe() {\n    const { selector, internals } = currentAttrs;\n\n    if (typeof selector === 'undefined') {\n      // The value is the action\n      let result: ReadonlySelectionResult;\n\n      if (isIRIObject(internals.octiron.value)) {\n        result = {\n          pointer: '/local',\n          key: Symbol.for('/local'),\n          type: 'entity',\n          iri: internals.octiron.value['@id'],\n          ok: true,\n          value: internals.octiron.value,\n        };\n      } else {\n        result = {\n          pointer: '/local',\n          key: Symbol.for('/local'),\n          type: 'value',\n          value: internals.octiron.value,\n        };\n      }\n\n      details = {\n        selector: '',\n        complete: true,\n        hasErrors: false,\n        hasMissing: false,\n        dependencies: [],\n        required: [],\n        result: [result],\n      };\n    } else {\n      // Perform needs to select the action value\n      details = internals.store.subscribe({\n        key,\n        selector: selector,\n        value: internals.octiron.value as JSONObject,\n        listener,\n      });\n\n      fetchRequired(details.required);\n    }\n\n    createInstances();\n  }\n\n  return {\n    oninit: ({ attrs }) => {\n      currentAttrs = attrs;\n\n      subscribe();\n    },\n    onbeforeupdate: ({ attrs }) => {\n      if (attrs.selector !== currentAttrs.selector) {\n        attrs.internals.store.unsubscribe(key);\n\n        subscribe();\n      }\n\n      currentAttrs = attrs;\n\n      for (const instance of Object.values(instances)) {\n        instance.action._updateArgs(attrs.args);\n      }\n    },\n    onbeforeremove: ({ attrs }) => {\n      currentAttrs = attrs;\n\n      attrs.internals.store.unsubscribe(key);\n    },\n    view: ({ attrs: { view, args } }): m.Children => {\n      if (details == null || !details.complete) {\n        return args.loading;\n      }\n\n      const {\n        pre,\n        sep,\n        post,\n        fallback,\n      } = args;\n\n      if (typeof view === 'undefined') {\n        return;\n      }\n\n      const list = Object.values(instances);\n      const children = [pre];\n\n      for (let index = 0; index < list.length; index++) {\n        const { selectionResult, action, octiron } = list[index];\n\n        if (index !== 0) {\n          children.push(sep);\n        }\n\n        if (selectionResult.type === 'value') {\n          children.push(view(action));\n        } else if (!selectionResult.ok && typeof fallback === 'function') {\n          children.push(fallback(octiron, selectionResult.reason as Failure));\n        } else if (!selectionResult.ok) {\n          children.push(fallback as m.Children);\n        } else {\n          children.push(view(action));\n        }\n      }\n\n      children.push(post);\n\n      return children;\n    },\n  };\n};\n", "import m from 'mithril';\nimport type { HTMLFragmentsHandler, IntegrationState } from \"../types/store.ts\";\nimport type { Octiron } from \"../types/octiron.ts\";\n\nexport type HTMLFragmentsIntegrationComponentAttrs = {\n  o: Octiron;\n  fragment?: string;\n  rootHTML?: string;\n  fragmentsHTML: Record<string, string>;\n  rootEl?: Element;\n  fragmentEls?: Record<string, Element>;\n};\n\nexport type HTMLFragmentsIntegrationComponentType = m.ComponentTypes<HTMLFragmentsIntegrationComponentAttrs>;\n\nexport const HTMLFragmentsIntegrationComponent: HTMLFragmentsIntegrationComponentType = () => {\n  return {\n    view({ attrs: { fragment, rootHTML, fragmentsHTML }}) {\n      const html = fragment == null ? rootHTML : fragmentsHTML[fragment];\n\n      if (html == null) {\n        return null;\n      }\n\n      return m.trust(html);\n    },\n  }\n};\n\nexport type HTMLFragmentsIntegrationArgs = {\n  iri: string;\n  contentType: string;\n  root?: string;\n  ided?: Record<string, string>;\n  anon?: Record<string, string>;\n};\n\ntype HTMLFragmentsStateInfo = {\n  iri: string,\n  contentType: string,\n  hasRoot: boolean;\n  ided: string[];\n  anon: string[];\n};\n\nexport class HTMLFragmentsIntegration implements IntegrationState {\n  static type = 'html-fragments' as const;\n\n  readonly integrationType = 'html-fragments' as const;\n  #handler: HTMLFragmentsHandler;\n  #rendered: Set<string> = new Set();\n  #iri: string;\n  #fragment?: string;\n  #contentType: string;\n  #rootHTML?: string;\n  #idedHTML: Record<string, string>;\n  #anonHTML: Record<string, string>;\n  #fragmentsHTML: Record<string, string>;\n\n  constructor(handler: HTMLFragmentsHandler, {\n    iri,\n    contentType,\n    root,\n    ided,\n    anon,\n  }: HTMLFragmentsIntegrationArgs) {\n    this.#handler = handler;\n    this.#iri = iri;\n    this.#contentType = contentType;\n    this.#rootHTML = root;\n    this.#idedHTML = ided ?? {};\n    this.#anonHTML = anon ?? {};\n    this.#fragmentsHTML = {\n      ...anon,\n      ...ided,\n    };\n  }\n\n  get iri(): string {\n    return this.#iri;\n  }\n\n  get contentType(): string {\n    return this.#contentType;\n  }\n\n  public render(o: Octiron) {\n    return m(HTMLFragmentsIntegrationComponent, {\n      o,\n      rootHTML: this.#rootHTML,\n      fragmentsHTML: this.#fragmentsHTML,\n    });\n  }\n\n  public getStateInfo(): HTMLFragmentsStateInfo {\n    return {\n      iri: this.#iri,\n      contentType: this.#contentType,\n      hasRoot: this.#rootHTML != null,\n      ided: Object.keys(this.#idedHTML),\n      anon: Object.keys(this.#anonHTML),\n    };\n  }\n\n  public toInitialState(): string {\n    let html = '';\n\n    if (this.#rootHTML != null) {\n      html += `<template id=\"htmlfrag:${this.#iri}|${this.#contentType}\">${this.#rootHTML}</template>\\n`;\n    }\n\n    for (const [fragment, fragmentHTML] of Object.entries(this.#idedHTML)) {\n      if (!this.#rendered.has(fragment)) {\n        html += `<template id=\"htmlfrag:${this.#iri}|${this.#contentType}|${fragment}\">${fragmentHTML}</template>\\n`;\n      }\n    }\n\n    for (const [fragment, fragmentHTML] of Object.entries(this.#anonHTML)) {\n      html += `<template id=\"htmlfrag:${this.#iri}#${fragment}|${this.#contentType}\">${fragmentHTML}</template>\\n`;\n    }\n\n    return html;\n  }\n\n  static fromInitialState(handler: HTMLFragmentsHandler, {\n    iri,\n    contentType,\n    hasRoot,\n    ided,\n    anon,\n  }: HTMLFragmentsStateInfo): HTMLFragmentsIntegration | null {\n    let rootHTML: string | undefined;\n    const idedHTML: Record<string, string> = {};\n    const anonHTML: Record<string, string> = {};\n\n    if (hasRoot) {\n      const rootEl = document.getElementById(`htmlfrag:${iri}|${contentType}`);\n\n      if (rootEl) {\n        rootHTML = rootEl.outerHTML;\n      }\n    }\n\n    for (const fragment of ided) {\n      const el = document.getElementById(fragment) as HTMLElement | SVGElement;\n\n      if (el instanceof HTMLTemplateElement) {\n        const dom = el.cloneNode(true) as HTMLElement | SVGAElement;\n\n        idedHTML[fragment] = dom.innerHTML;\n      } else {\n        idedHTML[fragment] = el.innerHTML;\n      }\n    }\n\n    for (const fragment of anon) {\n      const el = document.getElementById(`htmlfrag:${iri}#${fragment}|${contentType}`) as HTMLElement | SVGElement;\n\n      if (el instanceof HTMLTemplateElement) {\n        const dom = el.cloneNode(true) as HTMLElement | SVGAElement;\n\n        idedHTML[fragment] = dom.innerHTML;\n      } else {\n        idedHTML[fragment] = el.innerHTML;\n      }\n    }\n\n    return new HTMLFragmentsIntegration(handler, {\n      contentType,\n      iri,\n      root: rootHTML,\n      ided: idedHTML,\n      anon: anonHTML,\n    });\n  }\n}\n", "import { isBrowserRender } from \"../consts.ts\";\nimport m from 'mithril';\nimport type { HTMLCleanupFn, HTMLHandler, IntegrationState } from \"../types/store.ts\";\nimport type { Octiron } from \"../types/octiron.ts\";\n\nexport type HTMLIntegrationComponentAttrs = {\n  o: Octiron,\n  html: string;\n  el?: Element;\n  handler: HTMLHandler;\n};\n\nexport type HTMLIntegrationComponentType = m.ComponentTypes<HTMLIntegrationComponentAttrs>;\n\nexport const HTMLIntegrationComponent: HTMLIntegrationComponentType = () => {\n  let onRemove: HTMLCleanupFn;\n\n  return {\n    oncreate({ dom, attrs: { o, el, handler } }) {\n      if (el != null) {\n        dom.append(el);\n      }\n\n      if (handler.onCreate != null) {\n        onRemove = handler.onCreate({\n          o,\n          dom,\n          addFragmentListener: () => {},\n        });\n      }\n    },\n    onbeforeremove() {\n      if (onRemove != null) {\n        onRemove();\n      }\n    },\n    view({ attrs: { html, el }}) {\n      if (el != null) {\n        return null;\n      }\n\n      return m.trust(html);\n    },\n  }\n};\n\nexport type HTMLIntegrationArgs = {\n  iri: string;\n  contentType: string;\n  html: string;\n  id?: string;\n  el?: Element;\n};\n\nexport class HTMLIntegration implements IntegrationState {\n  static type = 'html' as const;\n\n  readonly integrationType = 'html' as const;\n\n  #handler: HTMLHandler;\n  #rendered: boolean = false;\n  #iri: string;\n  #contentType: string;\n  #html: string;\n  #id: string | undefined;\n  #el: Element | undefined;\n\n  constructor(handler: HTMLHandler, {\n    iri,\n    contentType,\n    html,\n    id,\n    el,\n  }: HTMLIntegrationArgs) {\n    this.#handler = handler;\n    this.#iri = iri;\n    this.#contentType = contentType;\n    this.#html = html;\n    this.#id = id;\n    this.#el = el;\n  }\n\n  get iri(): string {\n    return this.#iri;\n  }\n\n  get contentType(): string {\n    return this.#contentType;\n  }\n\n  public render(o: Octiron) {\n    if (!isBrowserRender && !this.#rendered) {\n      this.#rendered = true;\n    }\n\n    return m(HTMLIntegrationComponent, {\n      o,\n      html: this.#html,\n      el: this.#el,\n      handler: this.#handler,\n    });\n  }\n\n  public getStateInfo() {\n    return {\n      iri: this.#iri,\n      contentType: this.#contentType,\n      id: this.#id,\n    };\n  }\n\n  public toInitialState(): string {\n    if (this.#id != null && this.#rendered) {\n      return '';\n    }\n\n    return `<template id=\"html:${this.#iri}|${this.#contentType}\">${this.#html}</template>\\n`;\n  }\n\n  static fromInitialState(handler: HTMLHandler, {\n    iri,\n    contentType,\n    id,\n  }: {\n    iri: string,\n    contentType: string,\n    id?: string,\n  }): HTMLIntegration | null {\n    let el: Element | null = null;\n\n    if (id != null) {\n      el = document.getElementById(id);\n    }\n\n    if (el != null) {\n      return new HTMLIntegration(handler, {\n        iri,\n        contentType,\n        html: el.outerHTML,\n        id,\n        el,\n      });\n    }\n\n    el = document.getElementById(`html:${iri}|${contentType}`);\n\n    if (el instanceof HTMLTemplateElement) {\n      el = el.cloneNode(true) as Element;\n\n      return new HTMLIntegration(handler, {\n        iri,\n        contentType,\n        html: el.outerHTML,\n        id,\n        el,\n      });\n    }\n\n    return null;\n  }\n\n}\n", "import type { Children } from 'mithril';\nimport type { Failure, HTTPErrorView, ContentParsingView } from './types/store.ts';\n\n\nexport class UndefinedFailure implements Failure {\n  undefined(children: Children): Children {\n    return children;\n  }\n\n  http(children: Children): Children;\n  http(view: HTTPErrorView): Children;\n  http(): Children {\n    return null;\n  }\n\n  unparserable(children: Children): Children;\n  unparserable(view: ContentParsingView): Children;\n  unparserable(): Children {\n    return null;\n  }\n}\n\nexport class HTTPFailure implements Failure {\n  #status: number;\n  #res: Response;\n\n  constructor(status: number, res: Response) {\n    this.#status = status;\n    this.#res = res;\n  }\n\n  get status(): number {\n    return this.#status;\n  }\n\n  get res(): Response {\n    return this.#res;\n  }\n\n  undefined(): Children {\n    return null;\n  }\n\n  http(children: Children): Children;\n  http(view: HTTPErrorView): Children;\n  http(arg: Children | HTTPErrorView): Children {\n    if (typeof arg === 'function') {\n      return arg(this.#status);\n    }\n\n    return arg;\n  }\n\n  unparserable(children: Children): Children;\n  unparserable(view: ContentParsingView): Children;\n  unparserable(): Children {\n    return null;\n  }\n}\n\nexport class ContentHandlingFailure implements Failure {\n  #error: Error;\n\n  constructor(error: Error) {\n    this.#error = error;\n  }\n\n  get error(): Error {\n    return this.#error;\n  }\n\n  undefined(): Children {\n    return null;\n  }\n\n  http(children: Children): Children;\n  http(view: HTTPErrorView): Children;\n  http(): Children {\n    return null;\n  }\n\n  unparserable(children: Children): Children;\n  unparserable(view: ContentParsingView): Children;\n  unparserable(arg: Children | ContentParsingView): Children {\n    if (typeof arg === 'function') {\n      return arg(this.#error);\n    }\n\n    return arg;\n  }\n}\n", "import type { IRIObject, JSONValue } from '../types/common.ts';\nimport { getIterableValue } from \"./getIterableValue.ts\";\nimport { isIRIObject } from \"./isIRIObject.ts\";\nimport { isIterable } from \"./isIterable.ts\";\nimport { isJSONObject } from \"./isJSONObject.ts\";\nimport { isMetadataObject } from \"./isMetadataObject.ts\";\nimport { isValueObject } from \"./isValueObject.ts\";\n\n\n/**\n * @description\n * Locates all IRI objects in a potentially deeply nested JSON-ld structure and\n * returns an array of the located IRI objects.\n *\n * Objects identified as IRI objects are not modified beyond being placed in\n * an array together.\n *\n * @param value - The value to flatten.\n * @param agg - An array to fill with the flattened IRI objects.\n *              This is required for the internal recursing performed by this\n *              function and isn't required by upstream callers.\n */\nexport function flattenIRIObjects(value: JSONValue, agg: IRIObject[] = []): IRIObject[] {\n  if (Array.isArray(value)) {\n    for (const item of value) {\n      flattenIRIObjects(item, agg);\n    }\n  } else if (isJSONObject(value)) {\n    if (isMetadataObject(value)) {\n      return agg;\n    }\n\n    if (isIRIObject(value)) {\n      agg.push(value);\n    }\n\n    if (isValueObject(value)) {\n      flattenIRIObjects(value['@value'], agg);\n    } else if (isIterable(value)) {\n      flattenIRIObjects(getIterableValue(value), agg);\n    } else {\n      for (const [term, item] of Object.entries(value)) {\n        if (term.startsWith('@')) {\n          continue;\n        }\n\n        flattenIRIObjects(item, agg);\n      }\n    }\n  }\n\n  return agg;\n}\n", "import type { AlternativesState, Context, PrimaryState, Fetcher, Handler, IntegrationStateInfo, IntegrationType, JSONLDHandlerResult, ReadonlySelectionResult, ResponseHook, SelectionDetails, SelectionListener, EntityState, SubmitArgs, Aliases, EntitySelectionResult, ValueSelectionResult } from \"./types/store.ts\";\nimport { HTMLFragmentsIntegration } from \"./alternatives/htmlFragments.ts\";\nimport { HTMLIntegration } from \"./alternatives/html.ts\";\nimport { isBrowserRender } from \"./consts.ts\";\nimport type { JSONObject } from \"./types/common.ts\";\nimport { HTTPFailure } from \"./failures.ts\";\nimport { flattenIRIObjects } from \"./utils/flattenIRIObjects.ts\";\nimport { getSelection } from './utils/getSelection.ts';\nimport type { FailureEntityState, SuccessEntityState } from \"./types/store.ts\";\nimport { mithrilRedraw } from \"./utils/mithrilRedraw.ts\";\n\nconst defaultAccept = 'application/problem+json, application/ld+json, text/lf';\nconst integrationClasses = {\n  [HTMLIntegration.type]: HTMLIntegration,\n  [HTMLFragmentsIntegration.type]: HTMLFragmentsIntegration,\n};\n\ntype StateInfo = {\n  rootIRI: string;\n  vocab?: string;\n  aliases?: Record<string, string>;\n  primary: Record<string, EntityState>;\n  alternatives: Record<string, IntegrationStateInfo[]>;\n};\n\ntype Dependencies = Map<string, Set<symbol>>;\ntype Listener = (details: SelectionDetails<ReadonlySelectionResult>) => void;\ntype ListenerDetails = {\n  key: symbol;\n  selector?: string;\n  value?: JSONObject;\n  required: string[];\n  dependencies: string[];\n  listener: Listener;\n  cleanup: () => void;\n};\ntype Listeners = Map<symbol, ListenerDetails>;\n\nfunction getJSONLdValues(vocab?: string, aliases?: Record<string, string>): [Map<string, string>, Context] {\n  const aliasMap: Map<string, string> = new Map<string, string>();\n  const context: Context = {};\n\n  if (vocab != null) {\n    context['@vocab'] = vocab;\n  }\n\n  if (aliases == null) {\n    return [aliasMap, context];\n  }\n\n  for (const [key, value] of Object.entries(aliases)) {\n    context[key] = value;\n    aliasMap.set(key, value);\n  }\n\n  return [aliasMap, context];\n}\n\nfunction getInternalHeaderValues(\n  headers?: Record<string, string>,\n  origins?: Record<string, Record<string, string>>,\n): [Headers, Map<string, Headers>] {\n  const internalHeaders = new Headers([['accept', defaultAccept ]]);\n  const internalOrigins = new Map<string, Headers>();\n\n  if (headers != null) {\n    for (const [key, value] of Object.entries(headers)) {\n      internalHeaders.set(key, value);\n    }\n  }\n\n  if (origins != null) {\n    for (const [origin, headers] of Object.entries(origins)) {\n      const internalHeaders = new Headers([['accept', defaultAccept]]);\n\n      for (const [key, value] of Object.entries(headers)) {\n        internalHeaders.set(key, value);\n      }\n\n      internalOrigins.set(origin, internalHeaders);\n    }\n  }\n\n  return [internalHeaders, internalOrigins];\n}\n\nexport type StoreArgs = {\n  /**\n   * Root endpoint of the API.\n   */\n  rootIRI: string;\n\n  /**\n   * Headers to send when making requests to endpoints\n   * sharing origins with the `rootIRI`.\n   */\n  headers?: Record<string, string>;\n\n  /**\n   * A map of origins and the headers to use when sending\n   * requests to them. Octiron will only send requests\n   * to endpoints which share origins with the `rootIRI`\n   * or are configured in the origins object. Appart\n   * from the accept header which has a common default\n   * value, headers are not shared between origins.\n   */\n  origins?: Record<string, Record<string, string>>;\n\n  /**\n   * The JSON-ld @vocab to use for octiron selectors.\n   */\n  vocab?: string;\n\n  /**\n   * Map of JSON-ld aliases to their values.\n   */\n  aliases?: Record<string, string>;\n\n  /**\n   * Primary initial state.\n   */\n  primary?: Record<string, EntityState>;\n\n  /**\n   * Alternatives initial state.\n   */\n  alternatives?: AlternativesState;\n\n  /**\n   * Handler objects.\n   */\n  handlers: Handler[];\n\n  /**\n   * Function which performs fetch.\n   */\n  fetcher?: Fetcher;\n\n  /**\n   * Hook used by SSR for awaiting response promises.\n   */\n  responseHook?: ResponseHook;\n};\n\nexport class Store {\n\n    #rootIRI: string;\n    #rootOrigin: string;\n    #headers: Headers;\n    #origins: Map<string, Headers>;\n    #vocab?: string | undefined;\n    #aliases: Map<string, string>;\n    #primary: PrimaryState = new Map();\n    #loading: Set<string> = new Set();\n    #alternatives: AlternativesState = new Map();\n    #handlers: Map<string, Handler>;\n    #keys: Set<string> = new Set();\n    #context: Context;\n    #termExpansions: Map<symbol, string | null> = new Map();\n    #fetcher?: Fetcher;\n    #responseHook?: ResponseHook;\n    #dependencies: Dependencies = new Map();\n    #listeners: Listeners = new Map();\n\n    constructor(args: StoreArgs) {\n      this.#rootIRI = args.rootIRI;\n      this.#rootOrigin = new URL(args.rootIRI).origin;\n      this.#vocab = args.vocab;\n      this.#fetcher = args.fetcher;\n      this.#responseHook = args.responseHook;\n\n      [this.#headers, this.#origins] = getInternalHeaderValues(args.headers, args.origins);\n      [this.#aliases, this.#context] = getJSONLdValues(args.vocab, args.aliases);\n\n      this.#handlers = new Map(args.handlers?.map?.((handler) => [handler.contentType, handler]));\n\n      if (args.primary != null) {\n        this.#primary = new Map(Object.entries(args.primary));\n      }\n\n      if (!this.#headers.has('accept')) {\n        this.#headers.set('accept', defaultAccept);\n      }\n\n      for (const origin of Object.values(this.#origins)) {\n        if (!origin.has('accept')) {\n          origin.set('accept', defaultAccept);\n        }\n      }\n    }\n\n    public get rootIRI() {\n      return this.#rootIRI;\n    }\n\n    public entity(iri: string) {\n      return this.#primary.get(iri);\n    }\n\n    public get vocab(): string | undefined {\n      return this.#vocab;\n    }\n\n    public get aliases(): Aliases {\n      return Object.fromEntries(\n        this.#aliases.entries()\n          .map(([key, value]) => [key.replace(/^/, ''), value])\n      );\n    }\n\n\n    public get context(): Context {\n      return this.#context;\n    }\n\n    /**\n     * Expands a term to a type.\n     *\n     * If an already expanded JSON-ld type is given it will\n     * return the input value.\n     */\n    public expand(termOrType: string): string {\n      const sym = Symbol.for(termOrType);\n      const cached = this.#termExpansions.get(sym);\n\n      if (cached != null) {\n        return cached;\n      }\n\n      let expanded: string | undefined;\n\n      if (this.#vocab != null && !/^[\\w\\d]+\\:/.test(termOrType)) {\n        expanded = this.#vocab + termOrType;\n      } else if (/https?:\\/\\//.test(termOrType)) {\n        // is a type\n        expanded = termOrType;\n      } else {\n        for (const [key, value] of this.#aliases) {\n          const reg = new RegExp(`^${key}:`);\n          if (reg.test(termOrType)) {\n            expanded = termOrType.replace(reg, value);\n            break;\n          }\n        }\n      }\n\n      this.#termExpansions.set(sym, expanded ?? termOrType);\n\n      return expanded ?? termOrType;\n    }\n\n    public select(selector: string, value?: JSONObject): SelectionDetails {\n      return getSelection({\n        selector,\n        value,\n        store: this,\n      });\n    }\n    /**\n     * Generates a unique key for server rendering only.\n     */\n    public key(): string {\n      while (true) {\n        const key = Math.random().toString(36).slice(2, 7);\n\n        if (!this.#keys.has(key)) {\n          this.#keys.add(key);\n\n          return key;\n        }\n      }\n    }\n\n    /**\n     * Creates a cleanup function which should be called\n     * when a subscriber unlistens.\n     */\n    #makeCleanupFn(key: symbol, details: SelectionDetails) {\n      return () => {\n        this.#listeners.delete(key);\n\n        for (const dependency of details.dependencies) {\n          this.#dependencies.delete(dependency);\n\n          if (isBrowserRender) {\n            setTimeout(() => {\n              if (this.#dependencies.get(dependency)?.size === 0) {\n                this.#primary.delete(dependency);\n              }\n            }, 5000);\n          }\n        }\n      }\n    }\n\n    /**\n     * Creates a unique key for the ir, method and accept headers\n     * to be used to mark the request's loading status.\n     */\n    #getLoadingKey(iri: string, method: string, accept?: string): string {\n      accept = accept ?? this.#headers.get('accept') ?? defaultAccept;\n\n      return `${method?.toLowerCase()}|${iri}|${accept.toLowerCase()}`;\n    }\n\n    public isLoading(iri: string): boolean {\n      const loadingKey = this.#getLoadingKey(iri, 'get');\n\n      return this.#loading.has(loadingKey);\n    }\n\n    /**\n     * Called on change to an entity. All listeners with dependencies in their\n     * selection for this entity have the latest selection result pushed to\n     * their listener functions.\n     */\n    #publish(iri: string, _contentType?: string): void {\n      const keys = this.#dependencies.get(iri);\n\n      if (keys == null) {\n        return;\n      }\n\n      for (const key of keys) {\n        const listenerDetails = this.#listeners.get(key);\n\n        if (listenerDetails == null) {\n          continue;\n        }\n\n        const details = getSelection<EntitySelectionResult | ValueSelectionResult>({\n          selector: listenerDetails.selector,\n          value: listenerDetails.value,\n          store: this,\n        } as Parameters<typeof getSelection>[0]);\n        const cleanup = this.#makeCleanupFn(key, details);\n\n        for (const dependency of details.dependencies) {\n          let depSet = this.#dependencies.get(dependency);\n\n          if (depSet == null) {\n            depSet = new Set([key]);\n\n            this.#dependencies.set(dependency, depSet);\n          } else {\n            depSet.add(key);\n          }\n        }\n\n        listenerDetails.cleanup = cleanup;\n        listenerDetails.listener(details);\n      }\n    }\n\n    #handleJSONLD({\n      iri,\n      res,\n      output,\n    }: {\n      iri: string;\n      res: Response;\n      output: JSONLDHandlerResult,\n    }): void {\n      const iris = [iri];\n\n      if (res.ok) {\n        this.#primary.set(iri, {\n          iri,\n          loading: false,\n          ok: true,\n          value: output.jsonld,\n        })\n      } else {\n        const reason = new HTTPFailure(res.status, res);\n\n        this.#primary.set(iri, {\n          iri,\n          loading: false,\n          ok: false,\n          value: output.jsonld,\n          status: res.status,\n          reason,\n        });\n      }\n\n      for (const entity of flattenIRIObjects(output.jsonld)) {\n        if (iris.includes(entity['@id'])) {\n          continue;\n        }\n\n        this.#primary.set(entity['@id'], {\n          iri: entity['@id'],\n          loading: false,\n          ok: true,\n          value: entity,\n        });\n      }\n\n      for (const iri in iris) {\n        this.#publish(iri);\n      }\n    }\n\n    async handleResponse(res: Response, iri: string = res.url.toString()) {\n      const contentType = res.headers.get('content-type')?.split?.(';')?.[0];\n\n      if (contentType == null) {\n        throw new Error('Content type not specified in response');\n      }\n\n      const handler = this.#handlers.get(contentType);\n\n      if (handler == null) {\n        throw new Error(`No handler configured for content type \"${contentType}\"`);\n      }\n\n      if (handler.integrationType === 'jsonld') {\n        const output = await handler.handler({\n          res,\n          store: this,\n        });\n\n        this.#handleJSONLD({\n          iri,\n          res,\n          output,\n        });\n      } else if (handler.integrationType === 'problem-details') {\n        throw new Error('Problem details response types not supported yet');\n      } else if (handler.integrationType === 'html') {\n        const output = await handler.handler({\n          res,\n          store: this,\n        });\n        let integrations = this.#alternatives.get(contentType);\n\n        if (integrations == null) {\n          integrations = new Map();\n\n          this.#alternatives.set(contentType, integrations);\n        }\n\n        integrations.set(iri, new HTMLIntegration(handler, {\n          iri,\n          contentType,\n          html: output.html,\n          id: output.id,\n        }));\n      } else if (handler.integrationType === 'html-fragments') {\n        const output = await handler.handler({\n          res,\n          store: this,\n        });\n        let integrations = this.#alternatives.get(contentType);\n\n        if (integrations == null) {\n          integrations = new Map();\n\n          this.#alternatives.set(contentType, integrations);\n        }\n\n        integrations.set(iri, new HTMLFragmentsIntegration(handler, {\n          iri,\n          contentType,\n          root: output.html,\n          ided: output.ided,\n          anon: output.anon,\n        }));\n      }\n\n      if (handler.integrationType !== 'jsonld') {\n        this.#publish(iri, contentType);\n      }\n    }\n\n    async #callFetcher(iri: string, args: {\n      method?: string;\n      accept?: string;\n      body?: string;\n    } = {}): Promise<void> {\n      let headers: Headers;\n      const url = new URL(iri);\n      const method = args.method || 'get';\n      const accept = args.accept ?? this.#headers.get('accept') ?? defaultAccept;\n      const loadingKey = this.#getLoadingKey(iri, method, args.accept);\n\n      if (url.origin === this.#rootOrigin) {\n        headers = new Headers(this.#headers);\n      } else if (this.#origins.has(url.origin)) {\n        headers = new Headers(this.#origins.get(url.origin));\n      } else {\n        throw new Error('Unconfigured origin');\n      }\n\n      if (accept != null) {\n        headers.set('accept', accept);\n      } else if (headers.get('accept') == null) {\n        headers.set('accept', defaultAccept);\n      }\n\n      this.#loading.add(loadingKey);\n\n      mithrilRedraw();\n\n      // This promise wrapping is so SSR can hook in and await the promise.\n      const promise = new Promise<Response>((resolve) => {\n        (async () => {\n          let res: Response;\n\n          if (this.#fetcher != null) {\n            res =  await this.#fetcher(iri, {\n              method,\n              headers,\n              body: args.body,\n            });\n          } else {\n            res = await fetch(iri, {\n              method,\n              headers,\n              body: args.body,\n            });\n          }\n\n          await this.handleResponse(res, iri);\n\n          this.#loading.delete(loadingKey);\n\n          mithrilRedraw();\n\n          resolve(res);\n        })();\n      });\n\n      if (this.#responseHook != null) {\n        this.#responseHook(promise);\n      }\n\n      await promise;\n    }\n\n    public subscribe({\n      key,\n      selector,\n      value,\n      listener,\n    }: {\n      key: symbol;\n      selector: string;\n      value?: JSONObject;\n      listener: SelectionListener;\n    }) {\n      const details = getSelection<ReadonlySelectionResult>({\n        selector,\n        value,\n        store: this,\n      });\n\n      const cleanup = this.#makeCleanupFn(key, details);\n\n      for (const dependency of details.dependencies) {\n        const depSet = this.#dependencies.get(dependency);\n\n        if (depSet == null) {\n          this.#dependencies.set(dependency, new Set([key]));\n        } else {\n          depSet.add(key);\n        }\n      }\n\n      this.#listeners.set(key, {\n        key,\n        selector,\n        value,\n        required: details.required,\n        dependencies: details.dependencies,\n        listener,\n        cleanup,\n      });\n\n      return details;\n    }\n\n    public unsubscribe(key: symbol) {\n      this.#listeners.get(key)?.cleanup();\n    }\n\n    public async fetch(iri: string): Promise<SuccessEntityState | FailureEntityState> {\n      await this.#callFetcher(iri);\n\n      return this.#primary.get(iri) as SuccessEntityState | FailureEntityState;\n    }\n\n    /**\n     * Submits an action. Like fetch this will overwrite\n     * entities in the store with any entities returned\n     * in the reponse.\n     *\n     * @param {string} iri                The iri of the request.\n     * @param {SubmitArgs} [args]         Arguments to pass to the fetch call.\n     * @param {string} [args.method]      The http submit method.\n     * @param {string} [args.contentType] The content type header value.\n     * @param {string} [args.body]        The body of the request.\n     */\n    public async submit(iri: string, args: SubmitArgs): Promise<SuccessEntityState | FailureEntityState> {\n      await this.#callFetcher(iri, args);\n\n      return this.entity(iri) as SuccessEntityState | FailureEntityState;\n    }\n\n    static fromInitialState({\n      headers,\n      origins,\n      handlers = [],\n    }: {\n      headers?: Record<string, string>;\n      origins?: Record<string, Record<string, string>>;\n      handlers?: Handler[];\n    }): Store {\n      const el = document.getElementById('oct-state-info') as HTMLScriptElement;\n      const stateInfo = JSON.parse(el.innerText) as StateInfo;\n      const alternatives: AlternativesState = new Map();\n      const handlersMap: Record<string, Handler> = handlers.reduce((acc, handler) => ({\n        ...acc,\n        [handler.contentType]: handler,\n      }), {});\n\n      for (const [integrationType, entities] of Object.entries(stateInfo.alternatives)) {\n        for (const stateInfo of entities) {\n          const handler = handlersMap[stateInfo.contentType];\n          const cls = integrationClasses[integrationType as IntegrationType];\n\n          if (cls.type !== handler.integrationType) {\n            continue;\n          }\n\n          // deno-lint-ignore no-explicit-any\n          const state = cls.fromInitialState(handler as any, stateInfo as any);\n\n          if (state == null) {\n            continue;\n          }\n\n          let integrations = alternatives.get(state.contentType);\n\n          if (integrations == null) {\n            integrations = new Map();\n\n            alternatives.set(state.contentType, integrations);\n          }\n\n          integrations.set(state.iri, state);\n        }\n      }\n\n      return new Store({\n        handlers,\n        alternatives,\n        headers,\n        origins,\n        rootIRI: stateInfo.rootIRI,\n        vocab: stateInfo.vocab,\n        aliases: stateInfo.aliases,\n        primary: stateInfo.primary,\n      });\n    }\n\n    public toInitialState(): string {\n      let html = '';\n      const stateInfo: StateInfo = {\n        rootIRI: this.#rootIRI,\n        vocab: this.#vocab,\n        aliases: Object.fromEntries(this.#aliases),\n        primary: Object.fromEntries(this.#primary),\n        alternatives: {},\n      };\n\n      for (const alternative of this.#alternatives.values()) {\n        for (const integration of alternative.values()) {\n          if (stateInfo.alternatives[integration.integrationType] == null) {\n            stateInfo.alternatives[integration.integrationType] = [\n              integration.getStateInfo(),\n            ];\n          } else {\n            stateInfo.alternatives[integration.integrationType].push(integration.getStateInfo());\n          }\n\n          html += integration.toInitialState();\n        }\n      }\n\n      html += `<script id=\"oct-state-info\" type=\"application/json\">${JSON.stringify(stateInfo)}</script>`\n\n      return html;\n    }\n\n}\n", "import { Store } from \"../store.ts\";\nimport type { TypeDef, TypeDefs } from \"../types/octiron.ts\";\n\n\nexport function makeTypeDefs<\n  const Type extends string = string,\n  // deno-lint-ignore no-explicit-any\n  const TypeDefList extends TypeDef<any, Type> = TypeDef<any, Type>,\n>(\n  store: Store,\n  ...typeDefs: Readonly<TypeDefList[]>\n): TypeDefs<Type, TypeDefList>;\n\nexport function makeTypeDefs<\n  const Type extends string = string,\n  // deno-lint-ignore no-explicit-any\n  const TypeDefList extends TypeDef<any, Type> = TypeDef<any, Type>,\n>(\n  ...typeDefs: Readonly<TypeDefList[]>\n): TypeDefs<Type, TypeDefList>;\n\n/**\n * @description\n * Aggregates a list of type defs into an easier to access\n * type def config object.\n *\n * @param typeDefs The type defs to aggregate.\n */\nexport function makeTypeDefs<\n  const Type extends string = string,\n  // deno-lint-ignore no-explicit-any\n  const TypeDefList extends TypeDef<any, Type> = TypeDef<any, Type>,\n>(\n  // deno-lint-ignore no-explicit-any\n  storeOrTypeDef: Store | TypeDef<any, Type>,\n  ...typeDefs: Readonly<TypeDefList[]>\n): TypeDefs<Type, TypeDefList> {\n  const config = {} as TypeDefs<Type, TypeDefList>;\n\n  if (storeOrTypeDef instanceof Store) {\n    for (const typeDef of typeDefs) {\n      // deno-lint-ignore no-explicit-any\n      (config as any)[storeOrTypeDef.expand(typeDef.type)] = typeDef;\n    }\n  } else {\n    // deno-lint-ignore no-explicit-any\n    (config[storeOrTypeDef.type] as any) = storeOrTypeDef;\n    for (const typeDef of typeDefs) {\n      // deno-lint-ignore no-explicit-any\n      (config as any)[typeDef.type] = typeDef;\n    }\n  }\n\n  return config;\n}\n", "\ntype ClassArg =\n  | undefined\n  | null\n  | string\n  | string[]\n  | Record<string, boolean | undefined>\n;\n\n/**\n * Merges arguments into a single css class string\n */\nexport function classes(...classArgs: ClassArg[]) {\n  const cls: string[] = [];\n\n  for (const classArg of classArgs) {\n    if (typeof classArg === 'undefined' || classArg === null) {\n      continue;\n    } else if (typeof classArg === 'string') {\n      cls.push(classArg);\n    } else if (Array.isArray(classArg)) {\n      for (const name of classArg) {\n        cls.push(name);\n      }\n    } else {\n      for (const [name, active] of Object.entries(classArg)) {\n        if (active) {\n          cls.push(name);\n        }\n      }\n    }\n  }\n\n  return cls.join(' ');\n}\n", "import type { JSONValue } from '../types/common.ts';\nimport type { TypeDef } from '../types/octiron.ts';\n\n/**\n * @description\n * Utility for creating a well typed typeDef.\n *\n * @param typeDef An object to property define the types for.\n */\nexport function makeTypeDef<\n  const Model extends JSONValue = JSONValue,\n  const Type extends string = string,\n>(\n  typeDef: TypeDef<Model, Type>,\n): TypeDef<Model, Type> {\n  return typeDef;\n}\n", "import type { Handler } from \"../types/store.ts\";\nimport { isJSONObject } from '../utils/isJSONObject.ts';\nimport jsonld from 'jsonld';\n\n\nexport const jsonLDHandler: Handler = {\n  integrationType: 'jsonld',\n  contentType: 'application/ld+json',\n  handler: async ({ res }) => {\n    const json = await res.json();\n\n    // cannot use json-ld ops on scalar types\n    if (!isJSONObject(json) && !Array.isArray(json)) {\n      throw new Error('JSON-LD Document should be an object');\n    }\n\n    const expanded = await jsonld.expand(json, {\n      documentLoader: async (url: string) => {\n        const res = await fetch(url, {\n          headers: {\n            'accept': 'application/ld+json',\n          }\n        });\n        const document = await res.json();\n\n        return {\n          documentUrl: url,\n          document,\n        };\n      }\n    });\n\n    const compacted = await jsonld.compact(expanded, {});\n\n    return {\n      jsonld: compacted,\n    };\n  },\n};\n", "import m from 'mithril';\nimport type { JSONArray, JSONObject, JSONPrimitive, JSONValue } from \"../types/common.ts\";\nimport { isJSONObject } from \"../utils/isJSONObject.ts\";\n\n\nexport type OctironJSONAttrs = {\n  // If given object keys will be rendered as clickable links to their own\n  // selection. This is used by `OctironExplorer` to allow navigation of the\n  // API serving the JSON-ld.\n  selector?: string;\n\n  // The JSON-ld value to render.\n  value: JSONValue;\n\n  location?: URL;\n};\n\nexport const OctironJSON: m.ClosureComponent<OctironJSONAttrs> = () => {\n  function renderIRI(iri: string) {\n    return m('code', [\n      m('span.oct-json-quote', '\"'),\n      m('a.oct-json-iri', {\n        href: iri,\n      }, iri),\n      m('span.oct-json-quote', '\"'),\n    ]);\n  }\n\n  function renderPrimitive(value: JSONPrimitive) {\n    const className = typeof value === 'boolean'\n      ? 'oct-json-boolean'\n      : typeof value === 'number'\n      ? 'oct-json-number'\n      : 'oct-json-string';\n\n    let presentValue: m.Children;\n\n    if (typeof value === 'boolean' && value) {\n      presentValue = 'true';\n    } else if (typeof value === 'boolean') {\n      presentValue === 'false';\n    } else if (typeof value === 'string') {\n      presentValue = [\n        m('span.oct-json-quote', '\"'),\n        value,\n        m('span.oct-json-quote', '\"'),\n      ];\n    } else {\n      presentValue = value;\n    }\n\n    return m('code', { className }, presentValue);\n  }\n\n  function renderArray(list: JSONArray, url?: URL, selector: string = '') {\n    const children: m.Children[] = [];\n\n    for (let index = 0; index < list.length; index++) {\n      const value = list[index];\n      children.push(\n        m(\n          'li.oct-json-arr-item',\n          maybeRenderDetails(null, value, url, selector),\n        ),\n      );\n    }\n\n    return m('ul.oct-json-arr', children);\n  }\n\n  const terminalTypes = ['@id', '@type', '@context'];\n  function renderObject(value: JSONObject, url?: URL, selector: string = '') {\n    const items: m.Children[] = [];\n    const list = Object.entries(value).toSorted((item) =>\n      item[0] === '@context' ? 1 : -1\n    );\n\n    for (let index = 0; index < list.length; index++) {\n      const [term, value] = list[index];\n      let children: m.Children;\n      const summary = [\n        m('span.oct-json-quote', '\"'),\n        m('span.oct-json-obj-key', term),\n        m('span.oct-json-quote', '\"'),\n        m('span.oct-json-obj-colon', ': '),\n      ];\n\n      if (term === '@id') {\n        children = [m('code', summary), renderIRI(value as string)];\n      } else if (url == null || terminalTypes.includes(term)) {\n        children = maybeRenderDetails(summary, value);\n      } else if (term.startsWith('@')) {\n        children = maybeRenderDetails(summary, value, url, selector);\n      } else {\n        const currentSelector = `${selector} ${term}`;\n        const currentURL = new URL(url);\n\n        currentURL.searchParams.set('selector', currentSelector);\n\n        const summary = [\n          m('span.oct-json-quote', '\"'),\n          m(\n            'span.oct-json-obj-key',\n            m(\n              'a',\n              { href: currentURL },\n              term,\n            ),\n          ),\n          m('span.oct-json-quote', '\"'),\n          m('span.oct-json-obj-colon', ': '),\n        ];\n        children = maybeRenderDetails(summary, value, url, currentSelector);\n      }\n\n      items.push(m('li.oct-json-obj-item', children));\n    }\n\n    return m('ul.oct-json-obj', items);\n  }\n\n  function maybeRenderDetails(\n    summary: m.Children,\n    value: JSONValue,\n    url?: URL,\n    selector: string = '',\n  ) {\n    if (isJSONObject(value)) {\n      return [\n        m(\n          'details.oct-json-details',\n          { open: true },\n          m(\n            'summary.oct-json-details-sum',\n            m('code', summary, m('span.oct-json-obj-open', '{')),\n          ),\n          renderValue(value, url, selector),\n        ),\n        m('code.oct-json-obj-close', '}'),\n      ];\n    } else if (Array.isArray(value)) {\n      return [\n        m(\n          'details.oct-json-details',\n          { open: true },\n          m(\n            'summary.oct-json-details-sum',\n            m('code', summary, m('span.oct-json-obj-open', '[')),\n          ),\n          renderValue(value, url, selector),\n        ),\n        m('code.oct-json-obj-close', ']'),\n      ];\n    }\n\n    return [m('code', summary), renderValue(value, url, selector)];\n  }\n\n  function renderValue(value: JSONValue, url?: URL, selector: string = '') {\n    if (isJSONObject(value)) {\n      return renderObject(value, url, selector);\n    } else if (Array.isArray(value)) {\n      return renderArray(value, url, selector);\n    }\n\n    return renderPrimitive(value);\n  }\n\n  return {\n    view: ({ attrs: { value, selector, location } }) => {\n      const url = location != null ? new URL(location) : undefined;\n      \n      return m('.oct-json', [\n        maybeRenderDetails(\n          null,\n          value,\n          url,\n          typeof selector === 'string' ? selector.trim() : undefined,\n        ),\n      ]);\n    },\n  };\n};\n", "import m from 'mithril';\nimport * as jsonld from 'jsonld';\nimport { mithrilRedraw } from \"../utils/mithrilRedraw.ts\";\nimport type { JSONObject } from \"../types/common.ts\";\nimport type { Octiron } from \"../types/octiron.ts\";\nimport { OctironJSON } from \"./OctironJSON.ts\";\nimport { flattenIRIObjects } from \"../utils/flattenIRIObjects.ts\";\n\nexport type OctironDebugAttrs = {\n  o: Octiron;\n  selector?: string;\n  location?: URL;\n};\n\nexport const OctironDebug: m.ClosureComponent<OctironDebugAttrs> = ({\n  attrs,\n}) => {\n  let currentAttrs = attrs;\n  let value = attrs.o.value as JSONObject;\n  let rendered: m.Children;\n  let displayStyle: 'value' | 'action-value' | 'component' | 'expanded' | 'flattened' = 'value';\n\n  async function onRender(redraw: boolean = true) {\n    const { o } = currentAttrs;\n    if (displayStyle === 'value') {\n      rendered = m(OctironJSON, { value, selector: currentAttrs.selector, location: currentAttrs.location });\n    } else if (\n      displayStyle === 'action-value' && (\n        o.octironType === 'action' ||\n        o.octironType === 'action-selection'\n      )\n    ) {\n      rendered = m(OctironJSON, { value: o.actionValue.value, selector: currentAttrs.selector, location: currentAttrs.location })\n    } else if (displayStyle === 'expanded') {\n      const expanded = await jsonld.compact(value, attrs.o.store.context);\n\n      rendered = m(OctironJSON, {\n        value: expanded,\n        location: currentAttrs.location,\n      });\n      // rendered = JSON.stringify(renderValue, null, 2);\n    } else if (displayStyle === 'flattened') {\n      const flattened = flattenIRIObjects(value);\n      rendered = m(OctironJSON, {\n        value: flattened,\n        selector: currentAttrs.selector,\n        location: currentAttrs.location,\n      });\n    }\n\n    if (redraw) {\n      mithrilRedraw();\n    }\n  }\n\n  function onSetValue(e: MouseEvent & { redraw: boolean }) {\n    e.redraw = false;\n    displayStyle = 'value';\n\n    onRender();\n  }\n\n  function onSetActionValue(e: MouseEvent & { redraw: boolean }) {\n    e.redraw = false;\n    displayStyle = 'action-value';\n\n    onRender();\n  }\n\n  function onSetComponent(e: MouseEvent & { redraw: boolean }) {\n    e.redraw = false;\n    displayStyle = 'component';\n\n    onRender();\n  }\n\n  function onSetExpanded(e: MouseEvent & { redraw: boolean }) {\n    e.redraw = false;\n    displayStyle = 'expanded';\n\n    onRender();\n  }\n\n  function onSetFlattened(e: MouseEvent & { redraw: boolean }) {\n    e.redraw = false;\n    displayStyle = 'flattened';\n\n    onRender();\n  }\n\n  return {\n    oninit: ({ attrs }) => {\n      currentAttrs = attrs;\n\n      onRender(false);\n    },\n    onbeforeupdate: ({ attrs }) => {\n      if (attrs.o.value !== value) {\n        value = attrs.o.value as JSONObject;\n\n        onRender(true);\n      }\n    },\n    view: ({ attrs: { o } }) => {\n      const actions: m.Children[] = [];\n      let children: m.Children;\n      let actionValueAction: m.Children;\n\n      if (displayStyle === 'component') {\n        children = m('.oct-debug-body', o.default());\n      } else {\n        children = m('.oct-debug-body', rendered);\n      }\n\n      if (o.octironType === 'action' || o.octironType === 'action-selection') {\n        actionValueAction = m('button.oct-button', { type: 'button', onclick: onSetActionValue }, 'Action value');\n      }\n\n      return m(\n        'aside.oct-debug',\n        m(\n          '.oct-debug-controls',\n          m(\n            '.oct-button-group',\n            m('button.oct-button', { type: 'button', onclick: onSetValue }, 'Value'),\n            actionValueAction,\n            m('button.oct-button', { type: 'button', onclick: onSetComponent }, 'Component'),\n            m('button.oct-button', { type: 'button', onclick: () => console.log(o) }, 'Log'),\n            ...actions,\n          ),\n        ),\n        children,\n      );\n    },\n  };\n};\n", "import m from 'mithril';\nimport type { AnyComponent, Octiron } from \"../types/octiron.ts\";\nimport { OctironDebug } from \"./OctironDebug.ts\";\n\n\nexport type OctironExplorerAttrs = {\n  selector?: string;\n  presentationStyle?: 'debug' | 'components';\n  autofocus?: boolean;\n  onChange?: (\n    selector: string,\n    presentationStyle: 'debug' | 'components',\n  ) => void;\n  location?: URL;\n  o: Octiron;\n};\n\nexport const OctironExplorer: m.ClosureComponent<OctironExplorerAttrs> = ({\n  attrs,\n}) => {\n  let value: string = attrs.selector || '';\n  let previousSelector: string = value;\n  let selector: string = value;\n  let presentationStyle: 'debug' | 'components' = attrs.presentationStyle || 'debug';\n  let onChange = attrs.onChange;\n  const fallbackComponent: AnyComponent = {\n    view: ({ attrs: { o } }) => {\n      return m(OctironDebug, { o, location: attrs.location });\n    },\n  };\n\n  function onSearch(evt: KeyboardEvent) {\n    value = (evt.target as HTMLInputElement).value;\n  }\n\n  function onEnter(evt: KeyboardEvent) {\n    if (evt.key === 'Enter') {\n      onApply();\n    }\n  }\n\n  function onApply() {\n    selector = value;\n\n    if (typeof onChange === 'function') {\n      onChange(selector, presentationStyle);\n    }\n  }\n\n  function onSetDebug() {\n    presentationStyle = 'debug';\n\n    if (typeof onChange === 'function') {\n      onChange(selector, presentationStyle);\n    }\n  }\n\n  function onSetComponents() {\n    presentationStyle = 'components';\n\n    if (typeof onChange === 'function') {\n      onChange(selector, presentationStyle);\n    }\n  }\n\n  return {\n    oninit: ({ attrs }) => {\n      onChange = attrs.onChange;\n    },\n    onbeforeupdate: ({ attrs }) => {\n      selector = attrs.selector ?? '';\n\n      if (selector !== previousSelector) {\n        value = previousSelector = selector;\n      }\n\n      onChange = attrs.onChange;\n    },\n    view: ({ attrs: { autofocus, o } }) => {\n      let children: m.Children;\n\n      if (selector.length !== 0 && presentationStyle === 'debug') {\n        children = o.root(selector, (o) => m(OctironDebug, { o, selector, location: attrs.location }));\n      } else if (selector.length !== 0) {\n        children = o.root(\n          selector,\n          (o) =>\n            m('div', o.default({ fallbackComponent, attrs: { selector } })),\n        );\n      } else if (presentationStyle === 'debug') {\n        children = o.root((o) => m(OctironDebug, { o, selector, location: attrs.location }));\n      } else {\n        children = o.root((o) =>\n          m('div', o.default({ fallbackComponent, attrs: { selector } }))\n        );\n      }\n\n      return m('.oct-explorer', m('.oct-explorer-controls',\n          m('.oct-form-group', [\n            m('input', {\n              value,\n              autofocus,\n              oninput: onSearch,\n              onkeypress: onEnter,\n            }),\n            m(\n              'button.oct-button',\n              {\n                type: 'button',\n                disabled: selector === value,\n                onclick: onApply,\n              },\n              'Apply',\n            ),\n          ]),\n          m('.oct-button-group',\n            m(\n              'button.oct-button',\n              {\n                type: 'button',\n                disabled: presentationStyle === 'debug',\n                onclick: onSetDebug,\n              },\n              'Debug',\n            ),\n            m(\n              'button.oct-button',\n              {\n                type: 'button',\n                disabled: presentationStyle === 'components',\n                onclick: onSetComponents,\n              },\n              'Components',\n            ),\n          ),\n        ),\n        m('pre.oct-explorer-body', children),\n      );\n    },\n  };\n};\n", "import m from 'mithril';\nimport type { OctironAction } from \"../types/octiron.ts\";\n\nexport type OctironFormAttrs = {\n  o: OctironAction;\n  id?: string;\n  class?: string;\n};\n\nexport const OctironForm: m.ClosureComponent<OctironFormAttrs> = (vnode) => {\n  const o = vnode.attrs.o;\n  const method = o.method?.toUpperCase() as 'GET' || 'POST' || 'GET';\n  const enctypes = {\n    GET: 'application/x-www-form-urlencoded',\n    POST: 'multipart/form-data',\n  } as const;\n\n  return {\n    view: ({ attrs: { o, ...attrs }, children }) => {\n      return m(\n        'form.oct-form',\n        {\n          ...attrs,\n          method,\n          enctype: enctypes[method || 'GET'],\n          action: o.url,\n          onSubmit: (evt: SubmitEvent) => {\n            evt.preventDefault();\n\n            o.submit();\n          },\n        },\n        children,\n      );\n    },\n  };\n};\n", "import m from 'mithril';\nimport type { OctironAction } from \"../types/octiron.ts\";\nimport { classes } from \"../utils/classes.ts\";\n\nexport type OctironSubmitButtonAttrs = {\n  o: OctironAction;\n  id?: string;\n  class?: string;\n};\n\nexport const OctironSubmitButton: m.ClosureComponent<\n  OctironSubmitButtonAttrs\n> = () => {\n  return {\n    view: ({ attrs, children }) => {\n      return m(\n        'button.oct-button.oct-submit-button',\n        {\n          id: attrs.id,\n          type: 'submit',\n          class: classes(attrs.class),\n        },\n        children,\n      );\n    },\n  };\n};\n", "import type { OctironRoot, TypeDef } from \"./types/octiron.ts\";\nimport { rootFactory } from \"./factories/rootFactory.ts\";\nimport { makeTypeDefs } from \"./utils/makeTypeDefs.ts\";\nimport { Store } from \"./store.ts\";\n\nexport * from './types/common.ts';\nexport * from './types/store.ts';\nexport * from './types/octiron.ts';\nexport * from './store.ts';\nexport * from './utils/classes.ts';\nexport * from './utils/makeTypeDef.ts';\nexport * from './utils/makeTypeDefs.ts';\nexport * from './handlers/jsonLDHandler.ts';\nexport * from './components/OctironJSON.ts';\nexport * from './components/OctironDebug.ts';\nexport * from './components/OctironExplorer.ts';\nexport * from './components/OctironForm.ts';\nexport * from './components/OctironSubmitButton.ts';\n\n/**\n * Creates a root octiron instance.\n */\nexport default function octiron({\n  typeDefs,\n  ...storeArgs\n}: ConstructorParameters<typeof Store>[0] & {\n  // deno-lint-ignore no-explicit-any\n  typeDefs?: TypeDef<any>[];\n}): OctironRoot {\n  const store = new Store(storeArgs);\n  const config = typeDefs != null\n    ? makeTypeDefs(store, ...typeDefs)\n    : {};\n\n  return rootFactory({\n    store,\n    typeDefs: config,\n  });\n}\n\noctiron.fromInitialState = ({\n  typeDefs,\n  ...storeArgs\n}: Parameters<typeof Store.fromInitialState>[0] & {\n  // deno-lint-ignore no-explicit-any\n  typeDefs?: TypeDef<any>[];\n}) => {\n  const store = Store.fromInitialState({\n    ...storeArgs,\n  });\n  const config = typeDefs != null\n    ? makeTypeDefs(store, ...typeDefs)\n    : {};\n\n  return rootFactory({\n    store,\n    typeDefs: config,\n  });\n}\n"],
  "mappings": "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",
  "names": ["i", "varSpec", "varName", "part", "m", "m", "m", "m", "body", "uriTemplates", "m", "args", "m", "onUpdate", "selector", "internals", "octiron", "url", "method", "body", "self", "args", "m", "octiron", "key", "attrs", "args", "m", "prevKeys", "key", "octiron", "m", "m", "m", "m", "m", "m", "_handler", "_rendered", "_iri", "_contentType", "headers", "internalHeaders", "stateInfo", "_contentType", "iri", "res", "document", "m", "m", "value", "summary", "m", "jsonld", "m", "attrs", "m", "m", "attrs", "o", "m", "o", "m", "m", "m"]
}
